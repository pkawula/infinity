"use strict";
(self["webpackChunkinfinity_vue"] = self["webpackChunkinfinity_vue"] || []).push([["vendors-node_modules_mdb-vue-ui-kit_js_mdb_es_min_js"],{

/***/ "./node_modules/mdb-vue-ui-kit/js/mdb.es.min.js":
/*!******************************************************!*\
  !*** ./node_modules/mdb-vue-ui-kit/js/mdb.es.min.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MDBAccordion": () => (/* binding */ _sfc_main$t),
/* harmony export */   "MDBAccordionItem": () => (/* binding */ _sfc_main$s),
/* harmony export */   "MDBBadge": () => (/* binding */ _sfc_main$Y),
/* harmony export */   "MDBBreadcrumb": () => (/* binding */ _sfc_main$i),
/* harmony export */   "MDBBreadcrumbItem": () => (/* binding */ _sfc_main$h),
/* harmony export */   "MDBBtn": () => (/* binding */ _sfc_main$X),
/* harmony export */   "MDBBtnClose": () => (/* binding */ _sfc_main$V),
/* harmony export */   "MDBBtnGroup": () => (/* binding */ _sfc_main$W),
/* harmony export */   "MDBCard": () => (/* binding */ _sfc_main$U),
/* harmony export */   "MDBCardBody": () => (/* binding */ _sfc_main$T),
/* harmony export */   "MDBCardFooter": () => (/* binding */ _sfc_main$O),
/* harmony export */   "MDBCardGroup": () => (/* binding */ _sfc_main$M),
/* harmony export */   "MDBCardHeader": () => (/* binding */ _sfc_main$P),
/* harmony export */   "MDBCardImg": () => (/* binding */ _sfc_main$Q),
/* harmony export */   "MDBCardLink": () => (/* binding */ _sfc_main$N),
/* harmony export */   "MDBCardText": () => (/* binding */ _sfc_main$R),
/* harmony export */   "MDBCardTitle": () => (/* binding */ _sfc_main$S),
/* harmony export */   "MDBCarousel": () => (/* binding */ _sfc_main$L),
/* harmony export */   "MDBCheckbox": () => (/* binding */ _sfc_main$4),
/* harmony export */   "MDBCol": () => (/* binding */ _sfc_main$a),
/* harmony export */   "MDBCollapse": () => (/* binding */ _sfc_main$F),
/* harmony export */   "MDBContainer": () => (/* binding */ _sfc_main$8),
/* harmony export */   "MDBDropdown": () => (/* binding */ _sfc_main$E),
/* harmony export */   "MDBDropdownItem": () => (/* binding */ _sfc_main$B),
/* harmony export */   "MDBDropdownMenu": () => (/* binding */ _sfc_main$C),
/* harmony export */   "MDBDropdownToggle": () => (/* binding */ _sfc_main$D),
/* harmony export */   "MDBFile": () => (/* binding */ _sfc_main$2),
/* harmony export */   "MDBFooter": () => (/* binding */ _sfc_main$g),
/* harmony export */   "MDBIcon": () => (/* binding */ _sfc_main$r),
/* harmony export */   "MDBInput": () => (/* binding */ _sfc_main$6),
/* harmony export */   "MDBListGroup": () => (/* binding */ _sfc_main$K),
/* harmony export */   "MDBListGroupItem": () => (/* binding */ _sfc_main$J),
/* harmony export */   "MDBModal": () => (/* binding */ _sfc_main$y),
/* harmony export */   "MDBModalBody": () => (/* binding */ _sfc_main$v),
/* harmony export */   "MDBModalFooter": () => (/* binding */ _sfc_main$u),
/* harmony export */   "MDBModalHeader": () => (/* binding */ _sfc_main$x),
/* harmony export */   "MDBModalTitle": () => (/* binding */ _sfc_main$w),
/* harmony export */   "MDBNavbar": () => (/* binding */ _sfc_main$q),
/* harmony export */   "MDBNavbarBrand": () => (/* binding */ _sfc_main$o),
/* harmony export */   "MDBNavbarItem": () => (/* binding */ _sfc_main$m),
/* harmony export */   "MDBNavbarNav": () => (/* binding */ _sfc_main$n),
/* harmony export */   "MDBNavbarToggler": () => (/* binding */ _sfc_main$p),
/* harmony export */   "MDBPageItem": () => (/* binding */ _sfc_main$j),
/* harmony export */   "MDBPageNav": () => (/* binding */ _sfc_main$k),
/* harmony export */   "MDBPagination": () => (/* binding */ _sfc_main$l),
/* harmony export */   "MDBPopover": () => (/* binding */ _sfc_main$z),
/* harmony export */   "MDBProgress": () => (/* binding */ _sfc_main$I),
/* harmony export */   "MDBProgressBar": () => (/* binding */ _sfc_main$H),
/* harmony export */   "MDBRadio": () => (/* binding */ _sfc_main$3),
/* harmony export */   "MDBRange": () => (/* binding */ _sfc_main$1),
/* harmony export */   "MDBRow": () => (/* binding */ _sfc_main$9),
/* harmony export */   "MDBSpinner": () => (/* binding */ _sfc_main$G),
/* harmony export */   "MDBSwitch": () => (/* binding */ _sfc_main),
/* harmony export */   "MDBTabContent": () => (/* binding */ _sfc_main$b),
/* harmony export */   "MDBTabItem": () => (/* binding */ _sfc_main$d),
/* harmony export */   "MDBTabNav": () => (/* binding */ _sfc_main$e),
/* harmony export */   "MDBTabPane": () => (/* binding */ _sfc_main$c),
/* harmony export */   "MDBTable": () => (/* binding */ _sfc_main$7),
/* harmony export */   "MDBTabs": () => (/* binding */ _sfc_main$f),
/* harmony export */   "MDBTextarea": () => (/* binding */ _sfc_main$5),
/* harmony export */   "MDBTooltip": () => (/* binding */ _sfc_main$A),
/* harmony export */   "mdbClickOutside": () => (/* binding */ vMdbClickOutside),
/* harmony export */   "mdbRipple": () => (/* binding */ RippleDirective),
/* harmony export */   "mdbScrollspy": () => (/* binding */ ScrollSpyDirective)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.esm-bundler.js");

const _sfc_main$Y = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBBadge",
  props: {
    badge: String,
    color: String,
    pill: Boolean,
    dot: Boolean,
    notification: Boolean,
    tag: {
      type: String,
      default: "span"
    }
  },
  setup(__props, { expose }) {
    const props = __props;
    const attrs = (0,vue__WEBPACK_IMPORTED_MODULE_0__.useAttrs)();
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "badge",
        props.color && `bg-${props.color}`,
        props.badge && `badge-${props.badge}`,
        props.pill && "rounded-pill",
        props.dot && "badge-dot",
        props.notification && "badge-notification"
      ];
    });
    expose({ attrs });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const bsColors = [
  "primary",
  "secondary",
  "success",
  "danger",
  "warning",
  "info",
  "light",
  "dark"
];
const gradient = "rgba({{color}}, 0.2) 0, rgba({{color}}, 0.3) 40%, rgba({{color}}, 0.4) 50%, rgba({{color}}, 0.5) 60%, rgba({{color}}, 0) 70%";
const defaultColor = [0, 0, 0];
const transitionBreakOpacity = 0.5;
const isBSColor = (propColor) => propColor && bsColors.includes(propColor.toLowerCase());
const colorToRGB = (color, defaultColor2) => {
  const hexToRgb = (color2) => {
    const HEX_COLOR_LENGTH = 7;
    const IS_SHORT_HEX = color2.length < HEX_COLOR_LENGTH;
    if (IS_SHORT_HEX) {
      color2 = `#${color2[1]}${color2[1]}${color2[2]}${color2[2]}${color2[3]}${color2[3]}`;
    }
    return [
      parseInt(color2.substr(1, 2), 16),
      parseInt(color2.substr(3, 2), 16),
      parseInt(color2.substr(5, 2), 16)
    ];
  };
  const namedColorsToRgba = (color2) => {
    const tempElem = document.body.appendChild(
      document.createElement("fictum")
    );
    const flag = "rgb(1, 2, 3)";
    tempElem.style.color = flag;
    if (tempElem.style.color !== flag) {
      return defaultColor2;
    }
    tempElem.style.color = color2;
    if (tempElem.style.color === flag || tempElem.style.color === "") {
      return defaultColor2;
    }
    color2 = getComputedStyle(tempElem).color;
    document.body.removeChild(tempElem);
    return color2;
  };
  const rgbaToRgb = (color2) => {
    const colorMatch = color2.match(/[.\d]+/g);
    if (colorMatch === null) {
      return;
    }
    const colorArr = colorMatch.map((a) => +Number(a));
    colorArr.length = 3;
    return colorArr;
  };
  if (typeof color === "string" && color.toLowerCase() === "transparent") {
    return defaultColor2;
  }
  if (typeof color === "string" && color[0] === "#") {
    return hexToRgb(color);
  }
  if (typeof color === "string" && color.indexOf("rgb") === -1) {
    color = namedColorsToRgba(color);
  }
  if (typeof color === "string" && color.indexOf("rgb") === 0) {
    return rgbaToRgb(color);
  }
  return defaultColor2;
};
const getDiameter = ({ offsetX, offsetY, height, width }) => {
  const top2 = offsetY <= height / 2;
  const left2 = offsetX <= width / 2;
  const pythagorean = (sideA, sideB) => Math.sqrt(sideA ** 2 + sideB ** 2);
  const positionCenter = offsetY === height / 2 && offsetX === width / 2;
  const quadrant = {
    first: top2 === true && left2 === false,
    second: top2 === true && left2 === true,
    third: top2 === false && left2 === true,
    fourth: top2 === false && left2 === false
  };
  const getCorner = {
    topLeft: pythagorean(offsetX, offsetY),
    topRight: pythagorean(width - offsetX, offsetY),
    bottomLeft: pythagorean(offsetX, height - offsetY),
    bottomRight: pythagorean(width - offsetX, height - offsetY)
  };
  let diameter = 0;
  if (positionCenter || quadrant.fourth) {
    diameter = getCorner.topLeft;
  } else if (quadrant.third) {
    diameter = getCorner.topRight;
  } else if (quadrant.second) {
    diameter = getCorner.bottomRight;
  } else if (quadrant.first) {
    diameter = getCorner.bottomLeft;
  }
  return diameter * 2;
};
const setStyles = (el, styles) => {
  for (const property in styles) {
    el.style[property] = styles[property];
  }
};
const getBackgroundImage = (color) => {
  const rgb = colorToRGB(color, defaultColor);
  if (color !== "" && rgb) {
    const rgbValue = rgb.join(",");
    const gradientImage = gradient.split("{{color}}").join(`${rgbValue}`);
    return `radial-gradient(circle, ${gradientImage})`;
  }
};
const runRipple = (el, waveConfig, options) => {
  const rippleElement = document.createElement("div");
  rippleElement.classList.add("ripple-wave");
  const diameterConfig = {
    offsetX: options.centered ? waveConfig.height / 2 : waveConfig.left,
    offsetY: options.centered ? waveConfig.width / 2 : waveConfig.top,
    height: waveConfig.height,
    width: waveConfig.width
  };
  const diameter = getDiameter(diameterConfig);
  const radiusValue = options.radius || diameter / 2;
  const opacity = {
    delay: options.duration && options.duration * transitionBreakOpacity,
    duration: options.duration && options.duration - options.duration * transitionBreakOpacity
  };
  const styles = {
    left: options.centered ? `${Math.round(waveConfig.width / 2 - radiusValue)}px` : `${Math.round(waveConfig.left - radiusValue)}px`,
    top: options.centered ? `${Math.round(waveConfig.height / 2 - radiusValue)}px` : `${Math.round(waveConfig.top - radiusValue)}px`,
    height: `${Math.round(
      options.radius && options.radius * 2 || diameter
    )}px`,
    width: `${Math.round(
      options.radius && options.radius * 2 || diameter
    )}px`,
    transitionDelay: `0s, ${opacity.delay}ms`,
    transitionDuration: `${options.duration}ms, ${opacity.duration}ms`
  };
  if (options.unbound) {
    el.classList.add("ripple-surface-unbound");
  }
  if (isBSColor(options.color)) {
    el.classList.add(`ripple-surface-${options.color}`);
  } else {
    styles.backgroundImage = getBackgroundImage(options.color);
  }
  setStyles(rippleElement, styles);
  el.appendChild(rippleElement);
  setTimeout(() => {
    rippleElement.classList.add("active");
  }, 50);
  setTimeout(
    () => {
      el.removeChild(rippleElement);
    },
    options.duration ? options.duration + 1e3 : 1e3
  );
};
const RippleDirective = {
  mounted(el, binding) {
    if (binding.value === false) {
      return;
    }
    const options = {
      centered: binding.value && binding.value.centered || false,
      color: binding.value && binding.value.color || "",
      duration: binding.value && binding.value.duration || 500,
      radius: binding.value && binding.value.radius || 0,
      unbound: binding.value && binding.value.unbound || false
    };
    el.classList.add("ripple-surface");
    el.waves = (e) => {
      const waveConfig = {
        top: e.layerY,
        left: e.layerX,
        height: el.offsetHeight,
        width: el.offsetWidth
      };
      runRipple(el, waveConfig, options);
    };
    el.addEventListener("click", (e) => el.waves(e));
  },
  updated(el) {
    if (!el.classList.contains("ripple-surface")) {
      el.classList.add("ripple-surface");
    }
  },
  unmounted(el) {
    el.removeEventListener("click", (e) => el.waves(e));
  }
};
const _sfc_main$X = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBBtn",
  props: {
    color: String,
    size: String,
    outline: String,
    rounded: Boolean,
    floating: Boolean,
    toggler: Boolean,
    toggle: Boolean,
    role: {
      type: String,
      default: "button"
    },
    type: {
      type: String,
      default: "button"
    },
    tag: {
      type: String,
      default: "button"
    },
    block: {
      type: Boolean,
      default: false
    },
    ripple: {
      type: [Object, Boolean],
      default: (props) => props.outline || props.color === "light" || props.color === "link" ? { color: "dark" } : true
    },
    picker: Boolean
  },
  emits: ["update:toggle"],
  setup(__props, { emit }) {
    const props = __props;
    const toggle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.toggle);
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        !props.picker && "btn",
        props.color && `btn-${props.color}`,
        props.size && `btn-${props.size}`,
        props.outline && `btn-outline-${props.outline}`,
        props.rounded && "btn-rounded",
        props.floating && "btn-floating",
        props.block && "btn-block",
        toggle.value && "active"
      ];
    });
    const handleClick = () => {
      if (props.toggler) {
        toggle.value = !toggle.value;
        emit("update:toggle", toggle.value);
      }
    };
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)(((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        type: __props.type,
        role: __props.role,
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className)),
        onClick: handleClick
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["type", "role", "class"])), [
        [(0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(RippleDirective), __props.ripple]
      ]);
    };
  }
});
const _sfc_main$W = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBBtnGroup",
  props: {
    size: String,
    vertical: Boolean,
    role: {
      type: String,
      default: "group"
    },
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        props.size && `btn-group-${props.size}`,
        props.vertical ? "btn-group-vertical" : "btn-group"
      ];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className)),
        role: __props.role
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "role"]);
    };
  }
});
const _sfc_main$V = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBBtnClose",
  props: {
    white: {
      type: Boolean,
      default: false
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["btn-close", props.white && `btn-close-white`];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("button", {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className)),
        "aria-label": "Close"
      }, null, 2);
    };
  }
});
const _sfc_main$U = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBCard",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    border: String,
    bg: String,
    text: [String, Array],
    shadow: String
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      const text = props.text;
      return [
        "card",
        props.border && `border border-${props.border}`,
        props.bg && `bg-${props.bg}`,
        props.shadow && `shadow-${props.shadow}`,
        props.text && spreadProps(text)
      ];
    });
    const spreadProps = (props2) => {
      if (typeof props2 === "string") {
        return `text-${props2}`;
      }
      return props2.map((prop) => `text-${prop}`.trim()).join(" ");
    };
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$T = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBCardBody",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    text: {
      type: [String, Array]
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      const text = props.text;
      return ["card-body", props.text && spreadProps(text)];
    });
    const spreadProps = (props2) => {
      if (typeof props2 === "string") {
        return `text-${props2}`;
      }
      return props2.map((prop) => `text-${prop}`.trim()).join(" ");
    };
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$S = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBCardTitle",
  props: {
    tag: {
      type: String,
      default: "h5"
    },
    subtitle: {
      type: Boolean,
      default: false
    }
  },
  setup(__props) {
    const props = __props;
    const tagName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (!props.subtitle) {
        return props.tag;
      }
      return props.tag !== "h5" ? props.tag : "h6";
    });
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [props.subtitle ? "card-subtitle" : "card-title"];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(tagName)), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$R = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBCardText",
  props: {
    tag: {
      type: String,
      default: "p"
    }
  },
  setup(__props) {
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => ["card-text"]);
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$Q = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBCardImg",
  props: {
    tag: {
      type: String,
      default: "img"
    },
    src: {
      type: String,
      required: true
    },
    alt: String,
    top: {
      type: Boolean,
      default: false
    },
    bottom: {
      type: Boolean,
      default: false
    },
    fluid: {
      type: Boolean,
      default: false
    },
    overlay: {
      type: Boolean,
      default: false
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        props.top && `card-img-top`,
        props.bottom && `card-img-bottom`,
        props.fluid && `img-fluid`,
        props.overlay && "card-img",
        !props.top && !props.bottom && !props.fluid && !props.overlay && `card-img`
      ];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, [
        ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
          src: __props.src,
          alt: __props.alt,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className)
        }, _ctx.$attrs), null, 16, ["src", "alt", "class"])),
        __props.overlay ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
          key: 0,
          class: "card-img-overlay"
        }, _ctx.$attrs), [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ], 16)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
      ], 64);
    };
  }
});
const _sfc_main$P = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBCardHeader",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    bg: String,
    border: String
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "card-header",
        props.border && `border-${props.border}`,
        props.bg && `bg-${props.bg}`
      ];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$O = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBCardFooter",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    bg: String,
    border: String
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "card-footer",
        props.border && `border-${props.border}`,
        props.bg && `bg-${props.bg}`
      ];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$N = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBCardLink",
  props: {
    tag: {
      type: String,
      default: "a"
    }
  },
  setup(__props) {
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => ["card-link"]);
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$M = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBCardGroup",
  props: {
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(__props) {
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => ["card-group"]);
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _hoisted_1$h = {
  key: 0,
  class: "carousel-indicators"
};
const _hoisted_2$c = ["ariaCurrent", "ariaLabel", "onClick"];
const _hoisted_3$8 = {
  key: 0,
  class: "img-fluid",
  autoplay: "",
  loop: "",
  muted: ""
};
const _hoisted_4$5 = ["src", "type"];
const _hoisted_5$3 = ["src", "alt"];
const _hoisted_6$3 = { key: 0 };
const _hoisted_7$2 = { key: 1 };
const _hoisted_8$2 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("span", {
  class: "carousel-control-prev-icon",
  "aria-hidden": "true"
}, null, -1);
const _hoisted_9$2 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("span", { class: "visually-hidden" }, "Previous", -1);
const _hoisted_10$2 = [
  _hoisted_8$2,
  _hoisted_9$2
];
const _hoisted_11$2 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("span", {
  class: "carousel-control-next-icon",
  "aria-hidden": "true"
}, null, -1);
const _hoisted_12$2 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("span", { class: "visually-hidden" }, "Next", -1);
const _hoisted_13$2 = [
  _hoisted_11$2,
  _hoisted_12$2
];
const _sfc_main$L = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBCarousel",
  props: {
    captionsClass: {
      type: String,
      default: "carousel-caption d-none d-md-block"
    },
    controls: {
      type: Boolean,
      default: true
    },
    dark: Boolean,
    fade: Boolean,
    indicators: {
      type: Boolean,
      default: true
    },
    interval: {
      type: [Number, Boolean],
      default: 5e3
    },
    items: Array,
    itemsClass: {
      type: String,
      default: "d-block w-100"
    },
    keyboard: {
      type: Boolean,
      default: true
    },
    modelValue: {
      type: Number,
      default: 0
    },
    pause: {
      type: [String, Boolean],
      default: "hover"
    },
    tag: {
      type: String,
      default: "div"
    },
    touch: {
      type: Boolean,
      default: true
    },
    innerClass: String
  },
  emits: ["update:modelValue"],
  setup(__props, { expose, emit }) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "carousel",
        "slide",
        props.fade && "carousel-fade",
        props.dark && "carousel-dark"
      ];
    });
    const innerClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["carousel-inner", props.innerClass];
    });
    const activeItemKey = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.modelValue);
    const carouselInnerRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const isSliding = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
    let slidingInterval = null;
    let isPaused = false;
    const prev = () => {
      slideTo("prev");
    };
    const next = () => {
      slideTo("next");
    };
    const slideTo = (target) => {
      if (isSliding.value) {
        return;
      }
      const isPausedState = isPaused;
      isPaused = false;
      slide(target);
      isPaused = isPausedState;
    };
    const slide = (target) => {
      if (isPaused || !carouselInnerRef.value) {
        return;
      }
      isSliding.value = true;
      const targetItemKey = getTargetKey(target);
      const isNext = getTargetSlideOrder(target);
      const directionalClassName = getDirectionalClassName(isNext);
      const orderClassName = getOrderClassName(isNext);
      const currentItem = getItem(activeItemKey.value);
      const targetItem = getItem(targetItemKey);
      activeItemKey.value = targetItemKey;
      targetItem.classList.add(orderClassName);
      emit("update:modelValue", activeItemKey.value);
      if (props.interval) {
        reloadInterval();
      }
      setTimeout(() => {
        currentItem.classList.add(directionalClassName);
        targetItem.classList.add(directionalClassName);
      }, 20);
      setTimeout(() => {
        currentItem.classList.remove("active");
        currentItem.classList.remove(directionalClassName);
        targetItem.classList.remove(directionalClassName);
        targetItem.classList.remove(orderClassName);
        targetItem.classList.add("active");
        isSliding.value = false;
      }, 600);
    };
    const getTargetKey = (target) => {
      if (target === "prev" && activeItemKey.value <= 0) {
        return props.items.length - 1;
      } else if (target === "prev") {
        return activeItemKey.value - 1;
      } else if (target === "next" && activeItemKey.value >= props.items.length - 1) {
        return 0;
      } else if (target === "next") {
        return activeItemKey.value + 1;
      } else {
        return target;
      }
    };
    const getTargetSlideOrder = (target) => {
      if (target === "next" || target > activeItemKey.value) {
        return true;
      } else {
        return false;
      }
    };
    const getDirectionalClassName = (isNext) => isNext ? "carousel-item-start" : "carousel-item-end";
    const getOrderClassName = (isNext) => isNext ? "carousel-item-next" : "carousel-item-prev";
    const getItem = (key) => carouselInnerRef.value.querySelectorAll(".carousel-item")[key];
    const reloadInterval = () => {
      clearInterval(slidingInterval);
      slidingInterval = null;
      const itemInterval = props.items[activeItemKey.value].interval || props.interval;
      slidingInterval = setInterval(() => {
        slide("next");
      }, itemInterval);
    };
    const handleMouseenter = () => {
      if (props.pause === "hover" && props.interval) {
        clearInterval(slidingInterval);
        slidingInterval = null;
        isPaused = true;
      }
    };
    const handleMouseleave = () => {
      if (props.pause === "hover" && props.interval) {
        reloadInterval();
        isPaused = false;
      }
    };
    const handleRight = () => {
      if (props.keyboard) {
        next();
      }
    };
    const handleLeft = () => {
      if (props.keyboard) {
        prev();
      }
    };
    const pointerEvent = Boolean(window.PointerEvent);
    const touchStartX = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0);
    const touchDeltaX = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0);
    const handleTouchstart = (event) => {
      if (!props.touch) {
        return;
      }
      const pointerType = event;
      const mouseEvent = event;
      const touchEvent = event;
      if (pointerEvent && (pointerType.pointerType === "pen" || pointerType.pointerType === "touch")) {
        touchStartX.value = mouseEvent.clientX;
      } else {
        touchStartX.value = touchEvent.touches[0].clientX;
      }
    };
    const handleTouchmove = (event) => {
      if (!props.touch) {
        return;
      }
      touchDeltaX.value = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - touchStartX.value;
    };
    const handleTouchend = (event) => {
      if (!props.touch) {
        return;
      }
      const pointerType = event;
      const mouseEvent = event;
      if (pointerEvent && (pointerType.pointerType === "pen" || pointerType.pointerType === "touch")) {
        touchDeltaX.value = mouseEvent.clientX - touchStartX.value;
      }
      handleSwipe();
    };
    const handleSwipe = () => {
      const absDeltax = Math.abs(touchDeltaX.value);
      if (absDeltax <= 40) {
        return;
      }
      const direction = absDeltax / touchDeltaX.value;
      touchDeltaX.value = 0;
      if (!direction) {
        return;
      }
      if (direction > 0) {
        prev();
      } else {
        next();
      }
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {
      const currentActiveItem = carouselInnerRef.value.querySelectorAll(".carousel-item")[activeItemKey.value];
      currentActiveItem.classList.add("active");
      if (props.interval) {
        reloadInterval();
      }
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onUnmounted)(() => {
      if (props.interval) {
        clearInterval(slidingInterval);
        slidingInterval = null;
      }
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => props.modelValue,
      (targetItemKey) => slideTo(targetItemKey)
    );
    expose({ next, prev });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className)),
        onMouseenter: handleMouseenter,
        onMouseleave: handleMouseleave,
        onKeydown: [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.withKeys)(handleRight, ["right"]),
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.withKeys)(handleLeft, ["left"])
        ],
        onTouchstart: handleTouchstart,
        onTouchmove: handleTouchmove,
        onTouchend: handleTouchend
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          __props.indicators ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_1$h, [
            ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(__props.items, (item, key) => {
              return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("button", {
                key,
                type: "button",
                class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)(activeItemKey.value === key && "active"),
                ariaCurrent: activeItemKey.value === key && "true",
                ariaLabel: `Slide ${key + 1}`,
                onClick: ($event) => slideTo(key)
              }, null, 10, _hoisted_2$c);
            }), 128))
          ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", {
            class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(innerClassName)),
            ref_key: "carouselInnerRef",
            ref: carouselInnerRef
          }, [
            ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(__props.items, (item, key) => {
              return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
                class: "carousel-item",
                key
              }, [
                item.video ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("video", _hoisted_3$8, [
                  (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("source", {
                    src: item.video,
                    type: item.videoType
                  }, null, 8, _hoisted_4$5)
                ])) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("img", {
                  key: 1,
                  src: item.src,
                  alt: item.alt,
                  class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)(__props.itemsClass)
                }, null, 10, _hoisted_5$3)),
                item.label || item.caption ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
                  key: 2,
                  class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)(__props.captionsClass)
                }, [
                  item.label ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("h5", _hoisted_6$3, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(item.label), 1)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
                  item.caption ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("p", _hoisted_7$2, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(item.caption), 1)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
                ], 2)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
              ]);
            }), 128))
          ], 2),
          __props.controls ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("button", {
            key: 1,
            onClick: prev,
            class: "carousel-control-prev",
            type: "button"
          }, _hoisted_10$2)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
          __props.controls ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("button", {
            key: 2,
            onClick: next,
            class: "carousel-control-next",
            type: "button"
          }, _hoisted_13$2)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
        ]),
        _: 1
      }, 40, ["class", "onKeydown"]);
    };
  }
});
const _sfc_main$K = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBListGroup",
  props: {
    flush: {
      type: Boolean,
      default: false
    },
    horizontal: {
      type: [Boolean, String],
      default: false
    },
    numbered: Boolean,
    tag: {
      type: String,
      default: "ul"
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "list-group",
        props.horizontal && horizontalClass.value,
        props.flush && "list-group-flush",
        props.numbered && "list-group-numbered"
      ];
    });
    const horizontalClass = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (!props.horizontal) {
        return;
      }
      return props.horizontal !== true ? `list-group-horizontal-${props.horizontal}` : "list-group-horizontal";
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$J = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBListGroupItem",
  props: {
    tag: {
      type: String,
      default: "li"
    },
    active: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    action: {
      type: Boolean,
      default: false
    },
    color: String
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "list-group-item",
        props.active && "active",
        props.disabled && "disabled",
        props.action && "list-group-item-action",
        props.color && `list-group-item-${props.color}`
      ];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className)),
        "aria-current": __props.active ? true : null,
        "aria-disabled": __props.disabled ? true : null,
        disabled: __props.disabled ? true : null
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "aria-current", "aria-disabled", "disabled"]);
    };
  }
});
const _sfc_main$I = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBProgress",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    height: Number
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => ["progress"]);
    const style = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return { height: props.height + "px" };
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className)),
        style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(style))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "style"]);
    };
  }
});
const _sfc_main$H = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBProgressBar",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    bg: String,
    striped: {
      type: Boolean,
      default: false
    },
    animated: {
      type: Boolean,
      default: false
    },
    value: {
      type: Number,
      default: 0
    },
    min: {
      type: Number,
      default: 0
    },
    max: {
      type: Number,
      default: 100
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "progress-bar",
        props.bg && `bg-${props.bg}`,
        props.striped && "progress-bar-striped",
        props.animated && "progress-bar-animated"
      ];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className)),
        role: "progressbar",
        "aria-valuenow": __props.value,
        "aria-valuemin": __props.min,
        "aria-valuemax": __props.max,
        style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)([
          {
            width: (__props.value - __props.min) / (__props.max - __props.min) * 100 + "%"
          }
        ])
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "aria-valuenow", "aria-valuemin", "aria-valuemax", "style"]);
    };
  }
});
const _hoisted_1$g = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("span", { class: "visually-hidden" }, "Loading...", -1);
const _sfc_main$G = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBSpinner",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    grow: {
      type: Boolean,
      default: false
    },
    color: String,
    size: String
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        props.grow ? "spinner-grow" : "spinner-border",
        props.color && `text-${props.color}`,
        `${props.size ? props.grow ? "spinner-grow-" + props.size : "spinner-border-" + props.size : ""}`
      ];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className)),
        role: "status"
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          _hoisted_1$g,
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const MAX_UID = 1e6;
const getUID = (prefix) => {
  do {
    prefix += Math.floor(Math.random() * MAX_UID);
  } while (document.getElementById(prefix));
  return prefix;
};
const stripNameRegex = /\..*/;
const customEvents = {
  mouseenter: "mouseover",
  mouseleave: "mouseout"
};
const nativeEvents = [
  "click",
  "dblclick",
  "mouseup",
  "mousedown",
  "contextmenu",
  "mousewheel",
  "DOMMouseScroll",
  "mouseover",
  "mouseout",
  "mousemove",
  "selectstart",
  "selectend",
  "keydown",
  "keypress",
  "keyup",
  "orientationchange",
  "touchstart",
  "touchmove",
  "touchend",
  "touchcancel",
  "pointerdown",
  "pointermove",
  "pointerup",
  "pointerleave",
  "pointercancel",
  "gesturestart",
  "gesturechange",
  "gestureend",
  "focus",
  "blur",
  "change",
  "reset",
  "select",
  "submit",
  "focusin",
  "focusout",
  "load",
  "unload",
  "beforeunload",
  "resize",
  "move",
  "DOMContentLoaded",
  "readystatechange",
  "error",
  "abort",
  "scroll"
];
function normalizeParams(originalTypeEvent, handler, delegationFn) {
  const delegation = typeof handler === "string";
  const originalHandler = delegation ? delegationFn : handler;
  let typeEvent = originalTypeEvent.replace(stripNameRegex, "");
  const custom = customEvents[typeEvent];
  if (custom) {
    typeEvent = custom;
  }
  const isNative = nativeEvents.indexOf(typeEvent) > -1;
  if (!isNative) {
    typeEvent = originalTypeEvent;
  }
  return [delegation, originalHandler, typeEvent];
}
function addHandler(element, originalTypeEvent, handler, delegationFn) {
  if (typeof originalTypeEvent !== "string" || !element) {
    return;
  }
  if (!handler) {
    handler = delegationFn;
    delegationFn = null;
  }
  const [delegation, originalHandler, typeEvent] = normalizeParams(
    originalTypeEvent,
    handler,
    delegationFn
  );
  element.addEventListener(typeEvent, originalHandler, delegation);
}
function removeHandler(element, typeEvent, handler, delegationSelector) {
  element.removeEventListener(typeEvent, handler, !!delegationSelector);
}
const on = function(element, event, handler, delegationFn = void 0) {
  addHandler(element, event, handler, delegationFn);
};
const off = function(element, event, handler, delegationFn = void 0) {
  if (typeof event !== "string" || !element) {
    return;
  }
  const [delegation, originalHandler, typeEvent] = normalizeParams(
    event,
    handler,
    delegationFn
  );
  removeHandler(
    element,
    typeEvent,
    originalHandler,
    delegation ? handler : null
  );
};
const _sfc_main$F = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBCollapse",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    modelValue: Boolean,
    id: String,
    collapseClass: String,
    duration: {
      type: Number,
      default: 300
    },
    sidenav: {
      type: Boolean,
      default: false
    }
  },
  emits: ["update:modelValue"],
  setup(__props, { expose, emit }) {
    const props = __props;
    const collapse = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const isActive = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.modelValue);
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        collapseClass.value,
        props.collapseClass,
        navbarFlexWrapValue && navbarFlexWrapValue.value ? "navbar-collapse" : "",
        showClass.value
      ];
    });
    const collapseClass = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.sidenav ? "sidenav-collapse" : isActive.value ? "collapse" : null;
    });
    const accordionState = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("accordionState", null);
    const incrementAccordionItemsCount = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)(
      "incrementAccordionItemsCount",
      false
    );
    const setAccordionActiveItem = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)(
      "setAccordionActiveItem",
      false
    );
    const index = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const manageAccordion = () => {
      if (index.value !== null && isActive.value) {
        setAccordionActiveItem && setAccordionActiveItem(index.value);
      }
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect)(
      () => {
        if (accordionState) {
          if (accordionState.active !== index.value) {
            emit("update:modelValue", false);
          }
        }
      },
      { flush: "post" }
    );
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {
      if (isActive.value) {
        collapse.value.style.height = collapse.value.scrollHeight + "px";
      }
      if (accordionState) {
        index.value = incrementAccordionItemsCount && incrementAccordionItemsCount();
        if (isActive.value) {
          setAccordionActiveItem && setAccordionActiveItem(index.value);
        }
      }
    });
    let isCollapsing = false;
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => props.modelValue,
      (cur, prev) => {
        if (isCollapsing) {
          setTimeout(() => {
            emit("update:modelValue", prev);
          }, props.duration);
          return;
        }
        isActive.value = cur;
        if (accordionState) {
          manageAccordion();
        }
      }
    );
    const openCollapse = () => {
      emit("update:modelValue", true);
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("openCollapse", openCollapse);
    const navbarFlexWrapValue = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)(
      "navbarFlexWrapValue",
      false
    );
    const showClass = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (!navbarFlexWrapValue || navbarFlexWrapValue.value === "wrap" && isActive.value) {
        return "show";
      } else if (navbarFlexWrapValue.value === "nowrap" && isActive.value) {
        return false;
      }
      return false;
    });
    const checkWrapCollapseValue = (cur, prev) => {
      if (prev === "null" && props.modelValue) {
        isActive.value = true;
      } else if (prev === "null" && !props.modelValue) {
        isActive.value = false;
      } else if (prev === "nowrap") {
        isActive.value = false;
      }
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => navbarFlexWrapValue && navbarFlexWrapValue.value,
      (cur, prev) => {
        if (cur === "nowrap") {
          isActive.value = true;
        } else if (cur === "wrap") {
          checkWrapCollapseValue(cur, prev);
        }
        emit("update:modelValue", isActive.value);
      },
      { immediate: true }
    );
    const uid = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.id ? props.id : getUID("collapsibleContent-");
    });
    const beforeEnter = (el) => {
      el.style.height = "0";
      isCollapsing = true;
    };
    const enter = (el) => {
      el.style.height = collapse.value.scrollHeight + "px";
    };
    const afterEnter = (el) => {
      if (!el.classList.contains("show")) {
        el.classList.add("show");
      }
      el.style.height = "";
      isCollapsing = false;
    };
    const beforeLeave = (el) => {
      if (!el.style.height) {
        el.classList.add("show");
        el.style.height = collapse.value.scrollHeight + "px";
      }
      isCollapsing = true;
    };
    const leave = (el) => {
      el.style.height = "0px";
    };
    const afterLeave = (el) => {
      el.classList.add("collapse");
      isCollapsing = false;
    };
    const previousWindowWidth = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const isThrottled = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
    const handleResize = () => {
      if (!isActive.value || isThrottled.value)
        return;
      isThrottled.value = true;
      const windowWidth = window.innerWidth;
      previousWindowWidth.value = windowWidth;
      setTimeout(() => {
        isThrottled.value = false;
      }, 100);
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {
      previousWindowWidth.value = window.innerWidth;
      on(window, "resize", handleResize);
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onUnmounted)(() => {
      off(window, "resize", handleResize);
    });
    expose({ collapse });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {
        onBeforeEnter: beforeEnter,
        onEnter: enter,
        onAfterEnter: afterEnter,
        onBeforeLeave: beforeLeave,
        onLeave: leave,
        onAfterLeave: afterLeave,
        "enter-active-class": "collapsing",
        "leave-active-class": "collapsing show",
        duration: __props.duration
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)(((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
            class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className)),
            id: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid),
            ref_key: "collapse",
            ref: collapse
          }, {
            default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["class", "id"])), [
            [vue__WEBPACK_IMPORTED_MODULE_0__.vShow, isActive.value]
          ])
        ]),
        _: 3
      }, 8, ["duration"]);
    };
  }
});
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect$2(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles$1 = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect: effect$2,
  requires: ["computeStyles"]
};
function getBasePlacement(placement) {
  return placement.split("-")[0];
}
var max = Math.max;
var min = Math.min;
var round = Math.round;
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
}
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle$1(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle$1(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle$1(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}
function within(min$1, value, max$1) {
  return max(min$1, min(value, max$1));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect$1(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow$1 = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect$1,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
function getVariation(placement) {
  return placement.split("-")[1];
}
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle$1(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles$1 = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};
var passive = {
  passive: true
};
function effect(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect,
  data: {}
};
var hash$1 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash$1[matched];
  });
}
var hash = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash[matched];
  });
}
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle$1(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle$1(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle$1(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
    }
  }
  return offsets;
}
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip$1 = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide$1 = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset$1 = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets$1 = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min$1 = offset2 + overflow[mainSide];
    var max$1 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset2, tether ? max(max$1, tetherMax) : max$1);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow$1 = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect2 = _ref3.effect;
        if (typeof effect2 === "function") {
          var cleanupFn = effect2({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});
function MDBPopper() {
  const isPopperActive = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
  const triggerEl = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
  const popperEl = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
  const popper2 = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(void 0);
  const popperOptions = (0,vue__WEBPACK_IMPORTED_MODULE_0__.reactive)({});
  function setPopper(trigger, popper22, config) {
    triggerEl.value = trigger;
    popperEl.value = popper22;
    popperOptions.value = {
      placement: "bottom",
      modifiers: [
        {
          name: "offset",
          options: {
            offset: [0, 0]
          }
        }
      ],
      ...config
    };
  }
  function togglePopper() {
    isPopperActive.value = !isPopperActive.value;
    if (isPopperActive.value) {
      (0,vue__WEBPACK_IMPORTED_MODULE_0__.nextTick)(() => setupPopper());
    }
  }
  function openPopper() {
    if (isPopperActive.value) {
      return;
    }
    isPopperActive.value = true;
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.nextTick)(() => popper2.value = setupPopper());
  }
  function closePopper() {
    if (!isPopperActive.value) {
      return;
    }
    isPopperActive.value = !isPopperActive.value;
  }
  function setupPopper() {
    if (popper2.value === void 0 || !popper2.value) {
      popper2.value = createPopper(
        triggerEl.value,
        popperEl.value,
        popperOptions.value
      );
    } else {
      popper2.value.update();
    }
  }
  function updatePopper(option, value) {
    popperOptions.value[option] = value;
    popper2.value = createPopper(
      triggerEl.value,
      popperEl.value,
      popperOptions.value
    );
  }
  function destroyPopper() {
    if (!popper2.value) {
      return;
    }
    popper2.value.destroy();
    popper2.value = void 0;
  }
  function getPopperOffset(offset2, element) {
    if (typeof offset2 === "string") {
      return offset2.split(",").map((val) => Number.parseInt(val, 10));
    }
    if (typeof offset2 === "function") {
      return (popperData) => offset2(popperData, element);
    }
    return offset2;
  }
  return {
    setPopper,
    togglePopper,
    isPopperActive,
    openPopper,
    closePopper,
    updatePopper,
    destroyPopper,
    getPopperOffset
  };
}
const handleBreakpoints = (windowWidth, breakpointValues) => {
  const breakpoints = {
    none: {
      width: 0,
      attr: null
    },
    sm: {
      width: 576,
      attr: null
    },
    md: {
      width: 768,
      attr: null
    },
    lg: {
      width: 992,
      attr: null
    },
    xl: {
      width: 1200,
      attr: null
    },
    xxl: {
      width: 1400,
      attr: null
    },
    mega: {
      width: 1e4,
      attr: null
    }
  };
  breakpointValues.forEach((value2) => {
    const match = Object.keys(breakpoints).filter(
      (breakpoint) => value2.includes(breakpoint) ? breakpoint : false
    )[0];
    if (match) {
      breakpoints[match].attr = value2;
    } else {
      breakpoints.none.attr = value2;
    }
  });
  const ranges = {};
  Object.keys(breakpoints).reduce((acc, cur, index) => {
    if (breakpoints[acc].attr && breakpoints[cur].attr || breakpoints[acc].attr && !cur) {
      ranges[breakpoints[acc].attr] = {
        min: breakpoints[acc].width,
        max: breakpoints[cur].width
      };
      return cur;
    } else if (breakpoints[acc].attr && !breakpoints[cur].attr) {
      if (index === Object.keys(breakpoints).length - 1) {
        ranges[breakpoints[acc].attr] = {
          min: breakpoints[acc].width,
          max: breakpoints[cur].width
        };
      }
      return acc;
    }
  });
  const value = Object.keys(ranges).filter((key) => {
    if (windowWidth > ranges[key].min && windowWidth < ranges[key].max) {
      return key;
    }
  })[0];
  return value;
};
const _sfc_main$E = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBDropdown",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    boundary: {
      type: String,
      default: "clippingParent"
    },
    btnGroup: {
      type: Boolean,
      default: false
    },
    dropup: {
      type: Boolean,
      default: false
    },
    dropend: {
      type: Boolean,
      default: false
    },
    dropstart: {
      type: Boolean,
      default: false
    },
    align: {
      type: [String, Array],
      default: "start"
    },
    offset: {
      type: [Array, String, Function],
      default: () => [0, 0]
    },
    popperConfig: [null, Object, Function],
    target: String,
    modelValue: Boolean
  },
  emits: ["update:modelValue"],
  setup(__props, { emit }) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        props.btnGroup ? "btn-group" : "dropdown",
        props.dropup && "dropup",
        props.dropend && "dropend",
        props.dropstart && "dropstart"
      ];
    });
    const {
      setPopper,
      isPopperActive,
      closePopper,
      openPopper,
      updatePopper,
      getPopperOffset
    } = MDBPopper();
    const root = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const triggerEl = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const popperEl = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const windowWidth = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(window.innerWidth);
    const menuAlignClasses = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)("");
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("menuAlignClasses", menuAlignClasses);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("closePopper", closePopper);
    const isActive = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.modelValue);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect)(() => isActive.value = props.modelValue);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("isActive", isActive);
    const isMenuMounted = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
    const dropdownMenu = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const setMenuMountedState = (boolean, menuRef) => {
      isMenuMounted.value = boolean;
      dropdownMenu.value = menuRef;
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("setMenuMountedState", setMenuMountedState);
    const handleMenuMountedState = (mountedValue) => {
      if (mountedValue) {
        popperSetup();
        openPopper();
      } else {
        closePopper();
      }
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => isMenuMounted.value,
      (cur) => handleMenuMountedState(cur),
      { immediate: true }
    );
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("isPopperActive", isPopperActive);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("externalTarget", props.target);
    const handleEscAndOutsideClick = () => {
      emit("update:modelValue", false);
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("handleEscAndOutsideClick", handleEscAndOutsideClick);
    const popperPosition = props.dropup ? "top" : props.dropend ? "right" : props.dropstart ? "left" : "bottom";
    const getConfig = () => {
      if (typeof props.align === "string") {
        menuAlignClasses.value = `dropdown-menu-${props.align}`;
      } else {
        menuAlignClasses.value = props.align.map(
          (prop) => `dropdown-menu-${prop}`.trim()
        );
      }
      let align = props.align;
      if (typeof props.align !== "string" || props.align !== "start" && props.align !== "end") {
        align = getBreakpointValue();
        on(window, "resize", listenToResize);
      }
      const placement = `${popperPosition}-${align}`;
      let boundary = document.querySelector(props.boundary);
      if (!boundary) {
        boundary = props.boundary;
      }
      const defaultBsPopperConfig = {
        placement,
        modifiers: [
          {
            name: "preventOverflow",
            options: {
              boundary
            }
          },
          {
            name: "offset",
            options: {
              offset: getPopperOffset(props.offset, root.value)
            }
          }
        ]
      };
      return {
        ...defaultBsPopperConfig,
        ...typeof props.popperConfig === "function" ? props.popperConfig(defaultBsPopperConfig) : props.popperConfig
      };
    };
    const popperSetup = () => {
      triggerEl.value = props.target ? document.querySelector(props.target) : root.value.querySelector("[data-trigger]");
      popperEl.value = dropdownMenu.value;
      const config = getConfig();
      setPopper(triggerEl.value, popperEl.value, config);
    };
    const getBreakpointValue = () => {
      windowWidth.value = window.innerWidth;
      let propsValues = props.align;
      if (typeof props.align === "string") {
        propsValues = ["start", props.align];
      }
      const activeBrakpointValue = handleBreakpoints(
        windowWidth.value,
        propsValues
      );
      if (!activeBrakpointValue) {
        return;
      }
      return activeBrakpointValue.includes("start") ? "start" : "end";
    };
    const listenToResize = () => {
      const align = getBreakpointValue();
      updatePopper("placement", `${popperPosition}-${align}`);
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onUnmounted)(() => {
      off(window, "resize", listenToResize);
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className)),
        ref_key: "root",
        ref: root
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
var vMdbClickOutside = {
  stopProp(e) {
    e.stopPropagation();
  },
  mounted(el, binding) {
    const handler = (e) => {
      const target = e.target;
      if (!el.contains(target) && el !== target) {
        binding.value(e);
      }
    };
    el.clickOutside = handler;
    const event = binding.modifiers.mousedown ? "mousedown" : "click";
    document.addEventListener(event, (e) => {
      var _a;
      return (_a = el.clickOutside) == null ? void 0 : _a.call(el, e);
    });
    document.addEventListener("touchstart", (e) => {
      var _a;
      return (_a = el.clickOutside) == null ? void 0 : _a.call(el, e);
    });
  },
  unmounted(el, binding) {
    if (!el.clickOutside)
      return;
    const event = binding.modifiers.mousedown ? "mousedown" : "click";
    document.removeEventListener(event, (e) => {
      var _a;
      return (_a = el.clickOutside) == null ? void 0 : _a.call(el, e);
    });
    document.removeEventListener("touchstart", (e) => {
      var _a;
      return (_a = el.clickOutside) == null ? void 0 : _a.call(el, e);
    });
    delete el.clickOutside;
  }
};
const _hoisted_1$f = {
  key: 1,
  class: "visually-hidden"
};
const _sfc_main$D = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBDropdownToggle",
  props: {
    ..._sfc_main$X.props,
    tag: {
      type: String,
      default: "button"
    },
    href: [String, null],
    split: {
      type: Boolean,
      default: false
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        btnClass.value,
        "dropdown-toggle",
        props.split && "dropdown-toggle-split",
        props.size && `btn-${props.size}`,
        props.outline && `btn-outline-${props.outline}`
      ];
    });
    const btnClass = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (props.tag !== "button")
        return;
      const color = props.color && !props.outline ? `btn-${props.color}` : props.outline ? "" : "btn-primary";
      return `btn ${color}`;
    });
    const expanded = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
    const toggle = () => {
      expanded.value = !expanded.value;
    };
    const isPopperActive = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("isPopperActive");
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect)(() => {
      expanded.value = isPopperActive.value;
    });
    const handleEscAndOutsideClick = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("handleEscAndOutsideClick");
    const handleClickOutside = (event) => {
      const target = event.target;
      if (isPopperActive && !target.closest(".dropdown-menu")) {
        handleEscAndOutsideClick();
      }
    };
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)(((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        type: "button",
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className)),
        "aria-expanded": expanded.value,
        "aria-haspopup": "true",
        onClick: toggle,
        "data-trigger": ""
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          !__props.split ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default", { key: 0 }) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("span", _hoisted_1$f, "Toggle Dropdown"))
        ]),
        _: 3
      }, 8, ["class", "aria-expanded"])), [
        [(0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(vMdbClickOutside), handleClickOutside]
      ]);
    };
  }
});
const __default__$a = {
  inheritAttrs: false
};
const _sfc_main$C = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  ...__default__$a,
  __name: "MDBDropdownMenu",
  props: {
    tag: {
      type: String,
      default: "ul"
    },
    fadeIn: {
      type: String,
      default: "fade-in"
    },
    fadeOut: {
      type: String,
      default: "fade-out"
    },
    animation: {
      type: Boolean,
      default: true
    },
    dark: {
      type: Boolean,
      default: false
    },
    static: {
      type: Boolean,
      default: false
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "dropdown-menu",
        menuAlignClasses === "dropdown-menu-start" ? "dropdown-menu-start" : menuAlignClasses.value,
        fadeClass.value,
        showClass.value && "show",
        props.dark && "dropdown-menu-dark"
      ];
    });
    const menuAlignClasses = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)(
      "menuAlignClasses",
      "dropdown-menu-start"
    );
    const root = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)("root");
    const fadeClass = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const showClass = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
    const staticStyle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.static ? { display: "block", position: "static" } : false;
    });
    const handleAnimation = () => {
      if (!props.animation) {
        return;
      }
      setTimeout(() => {
        fadeClass.value = false;
      }, 300);
    };
    const setMenuMountedState = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("setMenuMountedState", () => false);
    const isActive = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("isActive", false);
    if (isActive) {
      (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
        () => isActive.value,
        (cur) => {
          if (cur) {
            setTimeout(() => {
              setMenuMountedState(true, root.value);
            }, 100);
          } else if (!cur && isPopperActive) {
            setInactive();
            setTimeout(() => {
              setMenuMountedState(false);
            }, 300);
          }
        }
      );
    }
    const setInactive = () => {
      off(document, "keydown", handleDown);
      count.value = 0;
      fadeClass.value = props.animation && `animation ${props.fadeOut}`;
      showClass.value = false;
      handleAnimation();
    };
    const isMounted = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (props.static) {
        return true;
      } else if (isActive && isActive.value || isActive && !isActive.value && isPopperActive && isPopperActive.value) {
        return true;
      } else if (isActive && !isActive.value && isPopperActive && !isPopperActive.value) {
        setTimeout(() => {
          return false;
        }, 300);
      }
      return false;
    });
    const externalTarget = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("externalTarget", false);
    const shouldTeleport = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
    const shouldTeleportTo = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)("");
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {
      if (externalTarget) {
        const target = document.body.querySelector(externalTarget);
        if (target) {
          shouldTeleport.value = true;
          shouldTeleportTo.value = externalTarget;
        }
      }
    });
    const isPopperActive = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("isPopperActive", null);
    const setActive = () => {
      on(document, "keydown", handleDown);
      fadeClass.value = props.animation && `animation ${props.fadeIn}`;
      handleAnimation();
    };
    if (isPopperActive) {
      (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
        () => isPopperActive.value,
        (cur, prev) => {
          if (!prev && cur === true || prev === false) {
            items.value = root.value.querySelectorAll(
              ".dropdown-item"
            );
            showClass.value = true;
            setActive();
          }
        }
      );
    }
    const count = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0);
    const items = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const handleEscAndOutsideClick = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)(
      "handleEscAndOutsideClick",
      () => false
    );
    const handleDown = (event) => {
      var _a, _b;
      const key = event.key;
      if (key === "ArrowUp" || key === "ArrowDown") {
        event.preventDefault();
      }
      if (isActive && !isActive.value) {
        return;
      }
      items.value.forEach((item) => {
        item.classList.remove("active");
      });
      switch (key) {
        case "Escape":
          handleEscAndOutsideClick();
          return;
        case "Enter":
          (_a = items.value[count.value - 1]) == null ? void 0 : _a.click();
          return;
        case "ArrowUp":
          count.value--;
          if (count.value <= 0) {
            count.value = items.value.length;
          }
          break;
        case "ArrowDown":
          count.value++;
          if (count.value > items.value.length) {
            count.value = 1;
          }
          break;
      }
      (_b = items.value[count.value - 1]) == null ? void 0 : _b.classList.add("active");
    };
    return (_ctx, _cache) => {
      return !shouldTeleport.value ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, { key: 0 }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(isMounted) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
            key: 0,
            class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className),
            style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(staticStyle)
          }, _ctx.$attrs, {
            "data-popper": "",
            ref_key: "root",
            ref: root
          }), {
            default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
            ]),
            _: 3
          }, 16, ["class", "style"])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
        ]),
        _: 3
      })) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Teleport, {
        key: 1,
        to: shouldTeleportTo.value
      }, [
        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, null, {
          default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(isMounted) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
              key: 0,
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className),
              style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(staticStyle)
            }, _ctx.$attrs, {
              "data-popper": (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(externalTarget),
              ref_key: "root",
              ref: root
            }), {
              default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
                (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
              ]),
              _: 3
            }, 16, ["class", "style", "data-popper"])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
          ]),
          _: 3
        })
      ], 8, ["to"]));
    };
  }
});
const _hoisted_1$e = ["tabindex"];
const _hoisted_2$b = {
  key: 1,
  class: "dropdown-divider"
};
const __default__$9 = {
  inheritAttrs: false
};
const _sfc_main$B = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  ...__default__$9,
  __name: "MDBDropdownItem",
  props: {
    tag: {
      type: String,
      default: "a"
    },
    to: [String, Object],
    href: String,
    disabled: {
      type: Boolean,
      default: false
    },
    active: {
      type: Boolean,
      default: false
    },
    exact: {
      type: Boolean,
      default: false
    },
    newTab: {
      type: Boolean,
      default: false
    },
    submenu: {
      type: Boolean,
      default: false
    },
    submenuIcon: String,
    divider: {
      type: Boolean,
      default: false
    },
    text: {
      type: Boolean,
      default: false
    },
    header: {
      type: Boolean,
      default: false
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        dropdownClass.value,
        props.disabled ? "disabled" : "",
        props.active ? "active" : "",
        props.submenu && "dropdown-submenu"
      ];
    });
    const hasLinkOrTag = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (props.to !== void 0 || props.href !== void 0 || props.tag !== "a" || props.text) {
        return true;
      }
      return false;
    });
    const dropdownClass = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (props.text) {
        return "dropdown-item-text";
      } else if (props.header) {
        return "dropdown-header";
      }
      return "dropdown-item";
    });
    const tagName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (props.to) {
        return "router-link";
      } else if (props.text) {
        return "span";
      }
      return props.tag;
    });
    const tab = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (props.newTab) {
        return "_blank";
      }
      return null;
    });
    const handleEscAndOutsideClick = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)(
      "handleEscAndOutsideClick",
      () => false
    );
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("li", {
        tabindex: __props.divider ? null : 0
      }, [
        (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(hasLinkOrTag) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(tagName)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({ key: 0 }, _ctx.$attrs, {
          to: __props.to,
          exact: __props.to ? __props.exact : null,
          href: __props.to ? null : __props.href,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className),
          target: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(tab),
          type: __props.tag === "button" ? "button" : null,
          "aria-current": __props.active ? true : null,
          "aria-disabled": __props.disabled ? true : null,
          disabled: __props.disabled ? true : null,
          onClick: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(handleEscAndOutsideClick)
        }), {
          default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, ["to", "exact", "href", "class", "target", "type", "aria-current", "aria-disabled", "disabled", "onClick"])) : __props.divider ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("hr", _hoisted_2$b)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default", { key: 2 })
      ], 8, _hoisted_1$e);
    };
  }
});
const _hoisted_1$d = {
  key: 0,
  "data-popper-arrow": "",
  class: "tooltip_arrow"
};
const _sfc_main$A = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBTooltip",
  props: {
    tag: {
      type: String,
      default: "span"
    },
    modelValue: Boolean,
    reference: String,
    popover: String,
    options: {
      type: [Object, Function],
      default() {
        return {};
      }
    },
    boundary: {
      type: String,
      default: "clippingParent"
    },
    fallbackPlacements: {
      type: Array,
      default: () => ["top", "right", "bottom", "left"]
    },
    offset: {
      type: String,
      default: "0, 5"
    },
    direction: {
      type: String,
      default: "top",
      validator: (value) => ["top", "right", "bottom", "left"].indexOf(value.toLowerCase()) > -1
    },
    maxWidth: {
      type: Number,
      default: 276
    },
    arrow: {
      type: Boolean,
      default: false
    },
    disabled: Boolean
  },
  emits: ["update:modelValue"],
  setup(__props, { emit }) {
    const props = __props;
    const { setPopper, isPopperActive, openPopper, closePopper, getPopperOffset } = MDBPopper();
    const triggerEl = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const popperEl = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const widthStyle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => `max-width: ${props.maxWidth}px!important`);
    const getConfig = () => {
      const placement = props.direction;
      let boundary = document.querySelector(props.boundary);
      if (!boundary) {
        boundary = props.boundary;
      }
      const defaultBsPopperConfig = {
        placement,
        modifiers: [
          {
            name: "flip",
            options: {
              fallbackPlacements: props.fallbackPlacements
            }
          },
          {
            name: "preventOverflow",
            options: {
              boundary
            }
          },
          {
            name: "offset",
            options: {
              offset: getPopperOffset(props.offset, triggerEl.value)
            }
          },
          {
            name: "arrow",
            options: {
              element: `.tooltip_arrow`,
              padding: 5
            }
          }
        ]
      };
      return {
        ...defaultBsPopperConfig,
        ...typeof props.options === "function" ? props.options(defaultBsPopperConfig) : props.options
      };
    };
    const popperSetup = () => {
      triggerEl.value = props.reference ? document.querySelector(props.reference) : triggerEl.value;
      popperEl.value = props.popover ? document.querySelector(props.popover) : popperEl.value;
      const config = getConfig();
      setPopper(triggerEl.value, popperEl.value, config);
    };
    const isThrottled = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect)(() => {
      if (props.modelValue) {
        if (isThrottled.value) {
          return;
        }
        (0,vue__WEBPACK_IMPORTED_MODULE_0__.nextTick)(() => {
          popperSetup();
          setTimeout(openPopper, 0);
          setTimeout(() => {
            popperEl.value.classList.add("show");
          }, 0);
        });
      } else {
        if (!isPopperActive.value) {
          return;
        }
        setTimeout(() => {
          popperEl.value.classList.remove("show");
        }, 10);
        isThrottled.value = true;
        setTimeout(() => {
          closePopper();
          isThrottled.value = false;
        }, 150);
      }
    });
    const isActive = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (props.modelValue || !props.modelValue && isPopperActive.value) {
        return true;
      } else if (!props.modelValue && !isPopperActive.value) {
        return false;
      }
      return false;
    });
    const onMouseEnter = () => {
      !props.disabled && emit("update:modelValue", true);
    };
    const onMouseLeave = () => {
      !props.disabled && emit("update:modelValue", false);
    };
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, [
        ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
          ref_key: "triggerEl",
          ref: triggerEl,
          style: { "display": "inline-block" }
        }, _ctx.$attrs, {
          onMouseenter: onMouseEnter,
          onMouseleave: onMouseLeave,
          onFocus: onMouseEnter,
          onBlur: onMouseLeave
        }), {
          default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "reference")
          ]),
          _: 3
        }, 16)),
        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, { name: "fade" }, {
          default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(isActive) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
              key: 0,
              ref_key: "popperEl",
              ref: popperEl,
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)({
                tooltip: true,
                fade: true,
                "tooltip-inner": true
              }),
              style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)([(0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(widthStyle)])
            }, [
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "tip"),
              __props.arrow ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_1$d)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
            ], 4)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
          ]),
          _: 3
        })
      ], 64);
    };
  }
});
const _hoisted_1$c = {
  key: 0,
  class: "popover-header"
};
const _hoisted_2$a = {
  key: 1,
  class: "popover-body"
};
const _hoisted_3$7 = {
  key: 2,
  "data-popper-arrow": "",
  class: "popover_arrow"
};
const _sfc_main$z = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBPopover",
  props: {
    tag: {
      type: String,
      default: "span"
    },
    modelValue: Boolean,
    reference: String,
    popover: String,
    options: {
      type: [Object, Function],
      default() {
        return {};
      }
    },
    boundary: {
      type: String,
      default: "clippingParent"
    },
    fallbackPlacements: {
      type: Array,
      default: () => ["top", "right", "bottom", "left"]
    },
    offset: {
      type: String,
      default: "0, 5"
    },
    direction: {
      type: String,
      default: "bottom",
      validator: (value) => ["top", "right", "bottom", "left"].indexOf(value.toLowerCase()) > -1
    },
    maxWidth: {
      type: Number,
      default: 276
    },
    arrow: {
      type: Boolean,
      default: false
    },
    dismissible: {
      type: Boolean,
      default: false
    },
    hover: {
      type: Boolean,
      default: false
    }
  },
  emits: ["update:modelValue"],
  setup(__props, { emit }) {
    const props = __props;
    const {
      setPopper,
      isPopperActive,
      openPopper,
      closePopper,
      destroyPopper,
      getPopperOffset
    } = MDBPopper();
    const triggerEl = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const popperEl = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const widthStyle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => `max-width: ${props.maxWidth}px!important`);
    const getOffset = () => {
      if (!props.arrow) {
        return props.offset;
      }
      return [0, 10];
    };
    const getConfig = () => {
      const placement = props.direction;
      let boundary = document.querySelector(props.boundary);
      if (!boundary) {
        boundary = props.boundary;
      }
      const offset2 = getOffset();
      const defaultBsPopperConfig = {
        placement,
        modifiers: [
          {
            name: "flip",
            options: {
              fallbackPlacements: props.fallbackPlacements
            }
          },
          {
            name: "preventOverflow",
            options: {
              boundary
            }
          },
          {
            name: "offset",
            options: {
              offset: getPopperOffset(offset2, triggerEl.value)
            }
          },
          {
            name: "arrow",
            options: {
              element: `.popover_arrow`,
              padding: 5
            }
          }
        ]
      };
      return {
        ...defaultBsPopperConfig,
        ...typeof props.options === "function" ? props.options(defaultBsPopperConfig) : props.options
      };
    };
    const popperSetup = () => {
      triggerEl.value = props.reference ? document.querySelector(props.reference) : triggerEl.value;
      popperEl.value = props.popover ? document.querySelector(props.popover) : popperEl.value;
      const config = getConfig();
      setPopper(triggerEl.value, popperEl.value, config);
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect)(() => {
      if (props.modelValue) {
        (0,vue__WEBPACK_IMPORTED_MODULE_0__.nextTick)(() => {
          popperSetup();
          setTimeout(openPopper, 0);
          setTimeout(() => {
            popperEl.value.classList.add("show");
            if (props.hover) {
              on(popperEl.value, "mouseover", onMouseOver);
              on(popperEl.value, "mouseout", onMouseOut);
            }
          }, 0);
        });
      } else {
        if (!isPopperActive.value) {
          return;
        }
        setTimeout(() => {
          off(popperEl.value, "mouseover", onMouseOver);
          off(popperEl.value, "mouseout", onMouseOut);
          popperEl.value.classList.remove("show");
        }, 0);
        setTimeout(closePopper, 0);
        destroyPopper();
      }
    });
    const isActive = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (props.modelValue || !props.modelValue && isPopperActive.value) {
        return true;
      } else if (!props.modelValue && !isPopperActive.value) {
        return false;
      }
      return false;
    });
    const onMouseOver = () => {
      emit("update:modelValue", true);
    };
    const onMouseOut = () => {
      emit("update:modelValue", false);
    };
    const handleClickOutside = () => {
      if (!props.dismissible || !props.modelValue) {
        return;
      }
      emit("update:modelValue", false);
    };
    const destroy = () => {
      off(triggerEl.value, "mouseover", onMouseOver);
      off(triggerEl.value, "mouseout", onMouseOut);
      destroyPopper();
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {
      if (props.hover) {
        on(triggerEl.value, "mouseover", onMouseOver);
        on(triggerEl.value, "mouseout", onMouseOut);
      }
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onUnmounted)(() => {
      destroy();
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, [
        (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)(((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
          ref_key: "triggerEl",
          ref: triggerEl,
          style: { "display": "inline-block" },
          tabindex: __props.dismissible ? 0 : null
        }, _ctx.$attrs), {
          default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "reference")
          ]),
          _: 3
        }, 16, ["tabindex"])), [
          [(0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(vMdbClickOutside), handleClickOutside]
        ]),
        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, null, {
          default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(isActive) && (_ctx.$slots.header || _ctx.$slots.body) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
              key: 0,
              ref_key: "popperEl",
              ref: popperEl,
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)({ popover: true, fade: true }),
              style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)([(0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(widthStyle)])
            }, [
              _ctx.$slots.header ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_1$c, [
                (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "header")
              ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
              _ctx.$slots.body ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_2$a, [
                (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "body")
              ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default"),
              __props.arrow ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_3$7)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
            ], 4)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
          ]),
          _: 3
        })
      ], 64);
    };
  }
});
function MDBFocusTrap() {
  const trapElement = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
  const firstFocusableElement = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
  const lastFocusableElement = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
  function initFocusTrap(element) {
    trapElement.value = element;
    calculateFocusTrap();
    on(window, "keydown", focusFirstElement);
    return true;
  }
  function calculateFocusTrap() {
    const focusable = Array.from(
      trapElement.value.querySelectorAll(
        'button, a, input, select, textarea, [tabindex]:not([tabindex="-1"])'
      )
    ).filter((el) => {
      const shouldFocus = el instanceof HTMLAnchorElement ? true : !el.disabled;
      return !el.classList.contains("ps__thumb-x") && !el.classList.contains("ps__thumb-y") && shouldFocus;
    });
    if (focusable.length === 0)
      return;
    firstFocusableElement.value = focusable[0];
    lastFocusableElement.value = focusable[focusable.length - 1];
    on(
      lastFocusableElement.value,
      "keydown",
      (e) => handleLastElementKeydown(e)
    );
  }
  function handleLastElementKeydown(e) {
    if (e.key === "Tab") {
      e.preventDefault();
      focusTrap();
    }
  }
  function focusTrap() {
    if (!firstFocusableElement.value)
      return;
    firstFocusableElement.value.focus();
  }
  function focusFirstElement(e, trap = false) {
    if (e.key === "Tab") {
      e.preventDefault();
      focusTrap();
    }
    if (trap)
      return;
    off(window, "keydown", focusFirstElement);
  }
  function removeFocusTrap() {
    off(lastFocusableElement.value, "keydown", handleLastElementKeydown);
  }
  return {
    initFocusTrap,
    removeFocusTrap
  };
}
function useMDBModal(props, emit) {
  const root = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)("root");
  const dialog = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)("dialog");
  const dialogTransform = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)("");
  const focusTrap = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
  const isActive = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.modelValue);
  const thisElement = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
  (0,vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect)(() => {
    isActive.value = props.modelValue;
    if (isActive.value) {
      emit("update:modelValue", true);
    }
  });
  const wrapperClass = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
    return [
      "modal",
      props.animation && "fade",
      isActive.value && "show",
      props.staticBackdrop && "modal-static"
    ];
  });
  const dialogClass = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
    return [
      "modal-dialog",
      props.size && "modal-" + props.size,
      props.centered && "modal-dialog-centered",
      props.scrollable && "modal-dialog-scrollable",
      props.fullscreen && fullscreenClass.value,
      props.dialogClasses
    ];
  });
  const backdropStyle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
    return props.removeBackdrop ? false : { "background-color": `rgba(0,0,0, 0.5)` };
  });
  const shouldOverflow = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
  const backdropOverflowStyle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
    if (shouldOverflow.value || props.keepOverflow) {
      return;
    }
    return "overflow: hidden";
  });
  const computedContentStyle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
    return props.bgSrc ? { "background-image": `url("${props.bgSrc}")` } : null;
  });
  const fullscreenClass = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
    if (!props.fullscreen) {
      return false;
    }
    return [
      props.fullscreen !== true ? `modal-fullscreen-${props.fullscreen}` : "modal-fullscreen"
    ];
  });
  const animateStaticBackdrop = () => {
    if (typeof dialog.value !== "string") {
      animateStaticModal(dialog.value);
    }
  };
  const closeModal = () => {
    emit("update:modelValue", false);
  };
  (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("closeModal", closeModal);
  const animateStaticModal = (el) => {
    el.style.transform = `scale(1.02)`;
    setTimeout(() => el.style.transform = `scale(1.0)`, 300);
  };
  const handleEscKeyUp = (e) => {
    if (e.key === "Escape" && isActive.value) {
      closeModal();
    }
  };
  const isBodyOverflowing = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
  const scrollbarWidth = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0);
  const getScrollbarWidth = () => {
    const scrollDiv = document.createElement("div");
    scrollDiv.className = "modal-scrollbar-measure";
    document.body.appendChild(scrollDiv);
    const scrollbarWidth2 = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollbarWidth2;
  };
  const setScrollbar = () => {
    const rect = document.body.getBoundingClientRect();
    isBodyOverflowing.value = Math.round(rect.left + rect.right) < window.innerWidth;
    scrollbarWidth.value = isBodyOverflowing.value ? Number(getScrollbarWidth().toFixed(2)) : 0;
  };
  const enter = (el) => {
    shouldOverflow.value = false;
    dialogTransform.value = "translate(0, -25%)";
    const child = el.childNodes[0];
    child.style.transform = dialogTransform.value;
    el.style.opacity = "0";
    el.style.display = "block";
    setScrollbar();
    document.body.style.paddingRight = `${scrollbarWidth.value}px`;
    el.style.paddingRight = `${scrollbarWidth.value}px`;
    document.body.classList.add("modal-open");
    emit("show", root.value);
  };
  const afterEnter = (el) => {
    var _a;
    const child = el.childNodes[0];
    child.style.transform = "translate(0,0)";
    el.style.opacity = "1";
    setTimeout(() => {
      shouldOverflow.value = true;
      emit("shown", root.value);
    }, 400);
    thisElement.value = root.value;
    if (props.keyboard) {
      on(window, "keyup", handleEscKeyUp);
    }
    if (props.focus) {
      focusTrap.value = MDBFocusTrap();
      (_a = focusTrap.value) == null ? void 0 : _a.initFocusTrap(root.value);
    }
  };
  const beforeLeave = (el) => {
    const child = el.childNodes[0];
    child.style.transform = dialogTransform.value;
    el.style.opacity = "0";
    setTimeout(() => {
      el.style.paddingRight = "";
      document.body.style.paddingRight = "";
      document.body.classList.remove("modal-open");
    }, 200);
    emit("hide", thisElement.value);
    if (props.keyboard) {
      off(window, "keyup", handleEscKeyUp);
    }
    if (props.focus && focusTrap.value) {
      focusTrap.value.removeFocusTrap();
    }
  };
  const afterLeave = () => {
    emit("hidden", thisElement.value);
    shouldOverflow.value = false;
  };
  (0,vue__WEBPACK_IMPORTED_MODULE_0__.onBeforeUnmount)(() => {
    off(window, "keyup", handleEscKeyUp);
  });
  return {
    wrapperClass,
    dialogClass,
    backdropStyle,
    backdropOverflowStyle,
    computedContentStyle,
    root,
    dialog,
    isActive,
    closeModal,
    animateStaticBackdrop,
    enter,
    afterEnter,
    beforeLeave,
    afterLeave,
    scrollbarWidth,
    setScrollbar,
    shouldOverflow,
    thisElement,
    handleEscKeyUp,
    focusTrap,
    dialogTransform,
    animateStaticModal,
    fullscreenClass
  };
}
const _sfc_main$y = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBModal",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    modelValue: Boolean,
    size: {
      type: String,
      validator: (value) => ["sm", "lg", "xl"].indexOf(value.toLowerCase()) > -1
    },
    removeBackdrop: {
      type: Boolean,
      default: false
    },
    staticBackdrop: {
      type: Boolean,
      default: false
    },
    centered: {
      type: Boolean,
      default: false
    },
    bgSrc: {
      type: String,
      default: ""
    },
    scrollable: {
      type: Boolean,
      default: false
    },
    duration: {
      type: Number,
      default: 400
    },
    labelledby: String,
    fullscreen: {
      type: [Boolean, String],
      default: false
    },
    animation: {
      type: Boolean,
      default: true
    },
    dialogClasses: {
      type: String
    },
    keyboard: {
      type: Boolean,
      default: true
    },
    focus: {
      type: Boolean,
      default: true
    }
  },
  emits: [
    "show",
    "shown",
    "hide",
    "hidden",
    "update:modelValue"
  ],
  setup(__props, { emit }) {
    const props = __props;
    const {
      wrapperClass,
      dialogClass,
      backdropStyle,
      backdropOverflowStyle,
      computedContentStyle,
      root,
      dialog,
      isActive,
      closeModal,
      animateStaticBackdrop,
      enter,
      afterEnter,
      beforeLeave,
      afterLeave
    } = useMDBModal(props, emit);
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {
        onEnter: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(enter),
        onAfterEnter: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(afterEnter),
        onBeforeLeave: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(beforeLeave),
        onAfterLeave: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(afterLeave)
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(isActive) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
            key: 0,
            ref_key: "root",
            ref: root,
            class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(wrapperClass)),
            style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)([(0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(backdropStyle), (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(backdropOverflowStyle)]),
            "aria-hidden": !(0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(isActive),
            "aria-modal": (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(isActive) ? true : null,
            "aria-labelledby": __props.labelledby,
            role: "dialog",
            onClick: _cache[0] || (_cache[0] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)(
              () => {
                if (__props.staticBackdrop) {
                  (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(animateStaticBackdrop)();
                } else {
                  (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(closeModal)();
                }
              },
              ["self"]
            ))
          }, {
            default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", {
                class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(dialogClass)),
                role: "document",
                ref_key: "dialog",
                ref: dialog
              }, [
                (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", {
                  class: "modal-content",
                  style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(computedContentStyle))
                }, [
                  (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
                ], 4)
              ], 2)
            ]),
            _: 3
          }, 8, ["class", "style", "aria-hidden", "aria-modal", "aria-labelledby"])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
        ]),
        _: 3
      }, 8, ["onEnter", "onAfterEnter", "onBeforeLeave", "onAfterLeave"]);
    };
  }
});
const _sfc_main$x = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBModalHeader",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    close: {
      type: Boolean,
      default: true
    },
    closeWhite: {
      type: Boolean,
      default: false
    },
    color: String
  },
  setup(__props) {
    const props = __props;
    const closeModal = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("closeModal");
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["modal-header", props.color && `bg-${props.color}`];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default"),
          __props.close ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(_sfc_main$V, {
            key: 0,
            white: __props.closeWhite,
            onClick: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(closeModal), ["prevent"])
          }, null, 8, ["white", "onClick"])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$w = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBModalTitle",
  props: {
    tag: {
      type: String,
      default: "h5"
    },
    bold: {
      type: Boolean,
      default: false
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["modal-title", props.bold && "font-weight-bold"];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$v = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBModalBody",
  props: {
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(__props) {
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => ["modal-body"]);
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$u = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBModalFooter",
  props: {
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(__props) {
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => ["modal-footer"]);
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$t = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBAccordion",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    modelValue: String,
    stayOpen: Boolean,
    flush: Boolean,
    classes: String,
    borderless: Boolean
  },
  emits: ["update:modelValue"],
  setup(__props, { emit }) {
    const props = __props;
    const accordionRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "accordion",
        props.flush && "accordion-flush",
        props.classes,
        props.borderless && "accordion-borderless"
      ];
    });
    const activeItem = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.modelValue);
    const setActiveItem = (item) => {
      activeItem.value = item;
      emit("update:modelValue", item);
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect)(() => activeItem.value = props.modelValue);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("activeItem", activeItem);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("stayOpen", props.stayOpen);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("setActiveItem", setActiveItem);
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className)),
        ref_key: "accordionRef",
        ref: accordionRef
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _hoisted_1$b = ["aria-controls"];
const _sfc_main$s = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBAccordionItem",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    collapseId: {
      type: String,
      required: true
    },
    headerTitle: String,
    headerClasses: String,
    bodyClasses: String,
    itemClasses: String,
    icon: String
  },
  setup(__props) {
    const props = __props;
    const itemRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const itemClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["accordion-item", props.itemClasses];
    });
    const headerClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["accordion-header", props.headerClasses];
    });
    const bodyClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["accordion-body", props.bodyClasses];
    });
    const buttonClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["accordion-button", !isActive.value && "collapsed"];
    });
    const icon = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.icon ? [props.icon] : false;
    });
    const setActiveItem = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)(
      "setActiveItem",
      null
    );
    const activeItem = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("activeItem", null);
    const stayOpen = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("stayOpen", false);
    const isActive = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(activeItem.value === props.collapseId);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect)(() => {
      if (stayOpen) {
        return;
      }
      isActive.value = activeItem.value === props.collapseId;
    });
    const toggleAccordion = () => {
      if (stayOpen) {
        isActive.value = !isActive.value;
      } else {
        isActive.value ? setActiveItem("") : setActiveItem(props.collapseId);
      }
    };
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(itemClassName)),
        ref_key: "itemRef",
        ref: itemRef
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("h2", {
            class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(headerClassName))
          }, [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("button", {
              onClick: toggleAccordion,
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(buttonClassName)),
              "aria-expanded": "true",
              "aria-controls": __props.collapseId
            }, [
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(icon) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("i", {
                key: 0,
                class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(icon))
              }, null, 2)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)((0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.headerTitle), 1)
            ], 10, _hoisted_1$b)
          ], 2),
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_sfc_main$F, {
            id: __props.collapseId,
            modelValue: isActive.value,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isActive.value = $event)
          }, {
            default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", {
                class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(bodyClassName))
              }, [
                (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
              ], 2)
            ]),
            _: 3
          }, 8, ["id", "modelValue"])
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$r = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBIcon",
  props: {
    iconStyle: {
      type: String,
      default: "fas"
    },
    icon: String,
    flag: String,
    size: String,
    fw: Boolean,
    solid: Boolean
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        !props.flag && props.iconStyle,
        props.flag ? `flag flag-${props.flag}` : `fa-${props.icon}`,
        props.size && `fa-${props.size}`,
        props.fw && "fa-fw",
        props.solid && "fa-solid"
      ];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("i", {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, [
        (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const _sfc_main$q = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBNavbar",
  props: {
    tag: {
      type: String,
      default: "nav"
    },
    bg: String,
    dark: {
      type: Boolean,
      default: false
    },
    light: {
      type: Boolean,
      default: false
    },
    double: {
      type: Boolean,
      default: false
    },
    expand: String,
    position: String,
    transparent: {
      type: Boolean,
      default: false
    },
    scrolling: {
      type: Boolean,
      default: false
    },
    scrollingOffset: {
      type: Number,
      default: 100
    },
    center: {
      type: Boolean,
      default: false
    },
    container: {
      type: [Boolean, String],
      default: false
    },
    classContainer: String,
    classNavbar: String
  },
  setup(__props) {
    const props = __props;
    const navClass = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "navbar",
        props.dark && "navbar-dark",
        props.light && "navbar-light",
        props.bg && !props.transparent ? `bg-${props.bg}` : "",
        props.expand ? props.expand === "small" || props.expand === "sm" ? "navbar-expand-sm" : props.expand === "medium" || props.expand === "md" ? "navbar-expand-md" : props.expand === "large" || props.expand === "lg" ? "navbar-expand-lg" : "navbar-expand-xl" : "",
        props.position === "top" ? "fixed-top" : props.position === "bottom" ? "fixed-bottom" : props.position === "sticky" ? "sticky-top" : "",
        props.scrolling && scrollingClass.value,
        props.double && "double-nav",
        props.center && "justify-content-center",
        props.classNavbar
      ];
    });
    const containerClass = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (!props.container) {
        return false;
      }
      return [
        props.container !== true ? `container-${props.container}` : "container-fluid",
        props.classContainer && props.classContainer
      ];
    });
    const scrollingClass = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)("navbar-scroll");
    const handleScroll = () => {
      if (window.pageYOffset > props.scrollingOffset) {
        scrollingClass.value = "navbar-scroll navbar-scrolled";
      } else {
        scrollingClass.value = "navbar-scroll";
      }
    };
    const navbar = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const navbarFlexWrapValue = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)("nowrap");
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("navbarFlexWrapValue", navbarFlexWrapValue);
    const handleResize = () => {
      if (!navbar.value)
        return;
      const wrap = getComputedStyle(navbar.value).flexWrap;
      if (wrap === "nowrap") {
        navbarFlexWrapValue.value = "nowrap";
      } else if (wrap === "wrap") {
        navbarFlexWrapValue.value = "wrap";
      }
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {
      if (getComputedStyle(navbar.value) && getComputedStyle(navbar.value).flexWrap === "wrap") {
        navbarFlexWrapValue.value = "wrap";
      } else {
        navbarFlexWrapValue.value = "nowrap";
      }
      window.addEventListener("resize", () => handleResize());
      if (props.scrolling) {
        window.addEventListener("scroll", handleScroll);
      }
      return () => {
        window.removeEventListener("scroll", handleScroll);
      };
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        ref_key: "navbar",
        ref: navbar,
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(navClass)),
        role: "navigation"
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          __props.container ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
            key: 0,
            class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(containerClass))
          }, [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
          ], 2)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
          !__props.container ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default", { key: 1 }) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$p = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBNavbarToggler",
  props: {
    tag: {
      type: String,
      default: "button"
    },
    target: {
      type: String,
      default: "#navbarSupportedContent"
    },
    togglerClass: String,
    togglerIcon: {
      type: String,
      default: "bars"
    },
    togglerSize: {
      type: String,
      default: "1x"
    },
    iconStyle: {
      type: String,
      default: "fas"
    }
  },
  setup(__props) {
    const props = __props;
    const isExpanded = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
    const navTogglerClass = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => ["navbar-toggler", props.togglerClass]);
    const handleClick = () => isExpanded.value = !isExpanded.value;
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(navTogglerClass)),
        type: "button",
        "aria-controls": __props.target,
        "aria-expanded": isExpanded.value,
        "aria-label": "Toggle navigation",
        onClick: handleClick
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(_sfc_main$r), {
            icon: __props.togglerIcon,
            size: __props.togglerSize,
            iconStyle: __props.iconStyle
          }, null, 8, ["icon", "size", "iconStyle"])
        ]),
        _: 1
      }, 8, ["class", "aria-controls", "aria-expanded"]);
    };
  }
});
const _sfc_main$o = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBNavbarBrand",
  props: {
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(__props) {
    const props = __props;
    const attrs = (0,vue__WEBPACK_IMPORTED_MODULE_0__.useAttrs)();
    const isLink = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => attrs.href ? "a" : props.tag);
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(isLink)), { class: "navbar-brand" }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      });
    };
  }
});
const _sfc_main$n = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBNavbarNav",
  props: {
    tag: {
      type: String,
      default: "ul"
    },
    right: {
      type: Boolean,
      default: false
    },
    center: {
      type: Boolean,
      default: false
    },
    vertical: {
      type: Boolean,
      default: false
    },
    justifyAround: {
      type: Boolean,
      default: false
    },
    class: String,
    nav: {
      type: Boolean,
      default: false
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        props.nav ? "nav" : "navbar-nav",
        props.right ? "ms-auto" : props.center ? "justify-content-center w-100" : props.vertical ? "flex-column" : props.justifyAround ? "justify-content-around w-100" : "me-auto",
        props.class && `${props.class}`
      ];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _hoisted_1$a = ["href", "target"];
const _sfc_main$m = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBNavbarItem",
  props: {
    tag: {
      type: String,
      default: "li"
    },
    active: {
      type: Boolean,
      default: false
    },
    disabled: Boolean,
    exact: {
      type: Boolean,
      default: false
    },
    newTab: {
      type: Boolean,
      default: false
    },
    to: [Object, String],
    href: String,
    linkClass: String
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["nav-item", !props.to && !props.href && props.active && "active"];
    });
    const linkClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "nav-link",
        props.disabled && "disabled",
        props.active && "active",
        props.linkClass
      ];
    });
    const tab = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (props.newTab) {
        return "_blank";
      }
      return "";
    });
    return (_ctx, _cache) => {
      const _component_router_link = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)("router-link");
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          __props.to ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(_component_router_link, {
            key: 0,
            class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(linkClassName)),
            exact: __props.exact,
            to: __props.to,
            target: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(tab)
          }, {
            default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["class", "exact", "to", "target"])) : __props.href ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("a", {
            key: 1,
            href: __props.href,
            class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(linkClassName)),
            target: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(tab)
          }, [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
          ], 10, _hoisted_1$a)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default", { key: 2 })
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$l = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBPagination",
  props: {
    tag: {
      type: String,
      default: "ul"
    },
    circle: {
      type: Boolean,
      default: false
    },
    lg: {
      type: Boolean,
      default: false
    },
    sm: {
      type: Boolean,
      default: false
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "pagination",
        props.sm && "pagination-sm",
        props.lg && "pagination-lg",
        props.circle && "pagination-circle"
      ];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _hoisted_1$9 = ["href", "tabindex", "aria-disabled"];
const _hoisted_2$9 = { "aria-hidden": "true" };
const _hoisted_3$6 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("span", { class: "sr-only" }, "Previous", -1);
const _hoisted_4$4 = ["href", "tabindex", "aria-disabled"];
const _hoisted_5$2 = { "aria-hidden": "true" };
const _hoisted_6$2 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("span", { class: "sr-only" }, "Next", -1);
const _sfc_main$k = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBPageNav",
  props: {
    tag: {
      type: String,
      default: "li"
    },
    disabled: {
      type: Boolean,
      default: false
    },
    href: {
      type: String,
      default: "#"
    },
    prev: {
      type: Boolean,
      default: false
    },
    next: {
      type: Boolean,
      default: false
    },
    icon: {
      type: Boolean,
      default: false
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => ["page-item", props.disabled && "disabled"]);
    const prevValue = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => props.icon ? "\xAB" : "Previous");
    const nextValue = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => props.icon ? "\xBB" : "Next");
    const disabledTabindex = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => props.disabled ? "-1" : "false");
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          __props.prev ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("a", {
            key: 0,
            class: "page-link",
            href: __props.href,
            tabindex: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(disabledTabindex),
            "aria-disabled": __props.disabled,
            "aria-label": "Previous"
          }, [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("span", _hoisted_2$9, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(prevValue)), 1),
            _hoisted_3$6
          ], 8, _hoisted_1$9)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
          __props.next ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("a", {
            key: 1,
            class: "page-link",
            href: __props.href,
            tabindex: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(disabledTabindex),
            "aria-disabled": __props.disabled,
            "aria-label": "Next"
          }, [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("span", _hoisted_5$2, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(nextValue)), 1),
            _hoisted_6$2
          ], 8, _hoisted_4$4)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
        ]),
        _: 1
      }, 8, ["class"]);
    };
  }
});
const _hoisted_1$8 = ["href", "aria-label", "aria-disabled", "tabindex"];
const _hoisted_2$8 = {
  key: 0,
  "aria-hidden": "true"
};
const _hoisted_3$5 = {
  key: 1,
  class: "sr-only"
};
const _sfc_main$j = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBPageItem",
  props: {
    tag: {
      type: String,
      default: "li"
    },
    active: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    href: String,
    icon: {
      type: Boolean,
      defaul: false
    },
    label: {
      type: String
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["page-item", props.active && "active", props.disabled && "disabled"];
    });
    const labelValue = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.icon && props.label ? props.label : props.href;
    });
    const disabledTabindex = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.disabled ? "-1" : " false";
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("a", {
            class: "page-link",
            href: __props.href,
            "aria-label": (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(labelValue),
            "aria-disabled": __props.disabled,
            tabindex: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(disabledTabindex)
          }, [
            __props.icon ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("span", _hoisted_2$8, [
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
            ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
            __props.icon ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("span", _hoisted_3$5, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(labelValue)), 1)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default", { key: 2 })
          ], 8, _hoisted_1$8)
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$i = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBBreadcrumb",
  props: {
    tag: {
      type: String,
      default: "ol"
    }
  },
  setup(__props) {
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => ["breadcrumb"]);
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$h = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBBreadcrumbItem",
  props: {
    tag: {
      type: String,
      default: "li"
    },
    active: {
      type: Boolean,
      default: false
    },
    current: {
      type: String,
      default: "page"
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => ["breadcrumb-item", props.active && "active"]);
    const currentName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => props.active && props.current);
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className)),
        "aria-current": (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(currentName)
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "aria-current"]);
    };
  }
});
const _sfc_main$g = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBFooter",
  props: {
    tag: {
      type: String,
      default: "footer"
    },
    bg: {
      type: String,
      default: "light"
    },
    text: [String, Array]
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      const text = props.text;
      return [
        props.bg && props.bg !== "none" && `bg-${props.bg}`,
        props.text && spreadProps(text)
      ];
    });
    const spreadProps = (props2) => {
      if (typeof props2 === "string") {
        return `text-${props2}`;
      }
      return props2.map((prop) => `text-${prop}`.trim()).join(" ");
    };
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$f = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBTabs",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    modelValue: String,
    vertical: {
      type: [Boolean, String],
      default: false
    }
  },
  emits: [
    "update:modelValue",
    "hide",
    "hidden",
    "show",
    "shown"
  ],
  setup(__props, { emit }) {
    const props = __props;
    const prevTab = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const activeTab = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const activeTabId = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.modelValue);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => props.modelValue,
      (cur) => {
        if (cur !== activeTabId.value) {
          activeTabId.value = cur;
          updateActiveTab(null, cur);
        }
      }
    );
    const updateActiveTab = (element, tabId) => {
      if (!element) {
        element = document.body.querySelector(`#tab-${tabId}`);
      }
      if (prevTab.value) {
        emit("hide", { target: prevTab.value, relatedTarget: element });
      }
      emit("show", { target: element, relatedTarget: prevTab.value });
      emit("update:modelValue", tabId);
      activeTab.value = element;
      activeTabId.value = tabId;
    };
    const emitShown = () => {
      emit("shown", { target: activeTab.value, relatedTarget: prevTab.value });
      prevTab.value = activeTab.value;
    };
    const emitHidden = () => {
      emit("hidden", {
        target: prevTab.value,
        relatedTarget: activeTab.value
      });
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("activeTab", activeTabId);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("updateActiveTab", updateActiveTab);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("emitShown", emitShown);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("emitHidden", emitHidden);
    const isVertical = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
    const windowWidth = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(window.innerWidth);
    const activeBrakpointValue = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)("isVertical", isVertical);
    const handleWindowResize = () => {
      windowWidth.value = window.innerWidth;
      const breakpointValue = handleBreakpoints(windowWidth.value, [
        "column",
        props.vertical
      ]);
      if (breakpointValue === activeBrakpointValue.value)
        return;
      isVertical.value = breakpointValue === props.vertical ? true : false;
      activeBrakpointValue.value = breakpointValue;
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {
      if (!props.vertical)
        return;
      if (props.vertical === true) {
        isVertical.value = true;
      } else {
        handleWindowResize();
        on(window, "resize", handleWindowResize);
      }
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onUnmounted)(() => {
      off(window, "resize", handleWindowResize);
    });
    return (_ctx, _cache) => {
      return isVertical.value ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
        key: 0,
        class: "row"
      }, _ctx.$attrs), {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default", { key: 1 });
    };
  }
});
const _sfc_main$e = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBTabNav",
  props: {
    tag: {
      type: String,
      default: "ul"
    },
    pills: Boolean,
    justify: Boolean,
    fill: Boolean,
    tabsClasses: String,
    col: {
      type: String,
      default: "3"
    }
  },
  setup(__props) {
    const props = __props;
    const isVertical = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("isVertical");
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "nav",
        props.pills ? "nav-pills" : "nav-tabs",
        props.justify && "nav-justified",
        props.fill && "nav-fill",
        isVertical.value && "flex-column",
        props.tabsClasses && props.tabsClasses
      ];
    });
    const columnClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [`col-${props.col}`];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(isVertical) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
        key: 0,
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(columnClassName))
      }, [
        ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
        }, {
          default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["class"]))
      ], 2)) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        key: 1,
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]));
    };
  }
});
const _hoisted_1$7 = {
  key: 0,
  class: "nav-item",
  role: "presentation"
};
const _hoisted_2$7 = ["id", "aria-controls", "href", "onClick"];
const __default__$8 = {
  inheritAttrs: false
};
const _sfc_main$d = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  ...__default__$8,
  __name: "MDBTabItem",
  props: {
    tag: {
      type: String,
      default: "a"
    },
    tabId: {
      type: String,
      required: true
    },
    href: String
  },
  setup(__props) {
    const props = __props;
    const item = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => ["nav-link", isActive.value && "active"]);
    const uid = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => `tab-${props.tabId}`);
    const controls = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => `${props.tabId}`);
    const activeTabId = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("activeTab");
    const isActive = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(activeTabId && activeTabId.value === props.tabId);
    const updateActiveTab = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("updateActiveTab");
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect)(
      () => isActive.value = activeTabId && activeTabId.value === props.tabId
    );
    const handleClick = () => {
      updateActiveTab(item.value, props.tabId);
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {
      if (isActive.value && updateActiveTab) {
        updateActiveTab(item.value, props.tabId);
      }
    });
    return (_ctx, _cache) => {
      return __props.href ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("li", _hoisted_1$7, [
        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("a", (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
          id: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid),
          ref_key: "item",
          ref: item,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className),
          role: "tab",
          "aria-controls": (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(controls),
          href: __props.href
        }, _ctx.$attrs, {
          onClick: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)(handleClick, ["prevent"])
        }), [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ], 16, _hoisted_2$7)
      ])) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
        key: 1,
        id: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid),
        ref_key: "item",
        ref: item,
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className),
        role: "tab",
        "aria-controls": (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(controls)
      }, _ctx.$attrs, {
        onClick: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)(handleClick, ["prevent"])
      }), {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16, ["id", "class", "aria-controls", "onClick"]));
    };
  }
});
const _sfc_main$c = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBTabPane",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    tabId: {
      type: String,
      required: true
    }
  },
  setup(__props) {
    const props = __props;
    const item = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => [
      "tab-pane fade",
      isActive.value && "show active"
    ]);
    const uid = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => `${props.tabId}`);
    const labelledby = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => `tab-${props.tabId}`);
    const activeTabId = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("activeTab");
    const isActive = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(activeTabId && activeTabId.value === props.tabId);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect)(
      () => isActive.value = activeTabId && activeTabId.value === props.tabId
    );
    const emitShown = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("emitShown");
    const emitHidden = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("emitHidden");
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {
      if (isActive.value && emitShown) {
        emitShown(props.tabId);
      }
    });
    const afterEnter = (el) => {
      el.style.opacity = "1";
    };
    const enter = (el) => {
      el.style.opacity = "0";
      emitShown(props.tabId);
    };
    const beforeLeave = (el) => {
      el.style.opacity = "1";
      emitHidden(props.tabId);
    };
    const afterLeave = (el) => {
      el.style.opacity = "0";
    };
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {
        duration: 150,
        onEnter: enter,
        onAfterEnter: afterEnter,
        onBeforeLeave: beforeLeave,
        onAfterLeave: afterLeave
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)(((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
            id: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid),
            ref_key: "item",
            ref: item,
            class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className)),
            role: "tabpanel",
            "aria-labelledby": (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(labelledby)
          }, {
            default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["id", "class", "aria-labelledby"])), [
            [vue__WEBPACK_IMPORTED_MODULE_0__.vShow, isActive.value]
          ])
        ]),
        _: 3
      });
    };
  }
});
const __default__$7 = {
  inheritAttrs: false
};
const _sfc_main$b = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  ...__default__$7,
  __name: "MDBTabContent",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    col: {
      type: String,
      default: "9"
    },
    contentClasses: String
  },
  setup(__props) {
    const props = __props;
    const isVertical = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)("isVertical", false);
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["tab-content", props.contentClasses && props.contentClasses];
    });
    const columnClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [`col-${props.col}`];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.KeepAlive, null, [
        (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(isVertical) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
          key: 0,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(columnClassName))
        }, [
          ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({ class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className) }, _ctx.$attrs), {
            default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
            ]),
            _: 3
          }, 16, ["class"]))
        ], 2)) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
          key: 1,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className)
        }, _ctx.$attrs), {
          default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, ["class"]))
      ], 1024);
    };
  }
});
const _sfc_main$a = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBCol",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    col: String,
    sm: String,
    md: String,
    lg: String,
    xl: String,
    offset: String,
    offsetSm: String,
    offsetMd: String,
    offsetLg: String,
    offsetXl: String,
    auto: {
      type: Boolean,
      default: false
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        props.col ? "col-" + props.col : "",
        props.sm ? "col-sm-" + props.sm : "",
        props.md ? "col-md-" + props.md : "",
        props.lg ? "col-lg-" + props.lg : "",
        props.xl ? "col-xl-" + props.xl : "",
        !props.col && !props.sm && !props.md && !props.lg && !props.xl ? "col" : "",
        props.offset ? "offset-" + props.offset : "",
        props.offsetSm ? "offset-sm-" + props.offsetSm : "",
        props.offsetMd ? "offset-md-" + props.offsetMd : "",
        props.offsetLg ? "offset-lg-" + props.offsetLg : "",
        props.offsetXl ? "offset-xl-" + props.offsetXl : "",
        props.auto ? "col-auto" : ""
      ];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$9 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBRow",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    start: {
      type: Boolean,
      default: false
    },
    end: {
      type: Boolean,
      default: false
    },
    center: {
      type: Boolean,
      default: false
    },
    between: {
      type: Boolean,
      default: false
    },
    around: {
      type: Boolean,
      default: false
    },
    cols: [String, Array]
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      const columns = props.cols;
      return [
        "row",
        props.cols ? `${spreadProps(columns)}` : "",
        props.start && "justify-content-start",
        props.end && "justify-content-end",
        props.center && "justify-content-center",
        props.between && "justify-content-between",
        props.around && "justify-content-around"
      ];
    });
    const spreadProps = (props2) => {
      if (typeof props2 === "string") {
        return `row-cols-${props2}`;
      }
      return props2.map((prop) => `row-cols-${prop}`.trim()).join(" ");
    };
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$8 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBContainer",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    sm: {
      type: Boolean,
      default: false
    },
    md: {
      type: Boolean,
      default: false
    },
    lg: {
      type: Boolean,
      default: false
    },
    xl: {
      type: Boolean,
      default: false
    },
    xxl: {
      type: Boolean,
      default: false
    },
    fluid: {
      type: Boolean,
      default: false
    }
  },
  setup(__props) {
    const props = __props;
    const className = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        props.fluid ? "container-fluid" : "",
        props.sm ? "container-sm" : "",
        props.md ? "container-md" : "",
        props.lg ? "container-lg" : "",
        props.xl ? "container-xl" : "",
        props.xxl ? "container-xxl" : "",
        !props.fluid && !props.sm && !props.md && !props.lg && !props.xl && !props.xxl ? "container" : ""
      ];
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(className))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const __default__$6 = {
  inheritAttrs: false
};
const _sfc_main$7 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  ...__default__$6,
  __name: "MDBTable",
  props: {
    tag: {
      type: String,
      default: "table"
    },
    variant: String,
    dark: {
      type: Boolean,
      default: false
    },
    light: {
      type: Boolean,
      default: false
    },
    border: {
      type: [Boolean, String],
      default: false
    },
    borderless: {
      type: Boolean,
      default: false
    },
    striped: {
      type: Boolean,
      default: false
    },
    hover: {
      type: Boolean,
      default: false
    },
    responsive: {
      type: [Boolean, String],
      default: false
    },
    align: String,
    sm: {
      type: Boolean,
      default: false
    },
    tableStyle: String,
    captionTop: {
      type: Boolean,
      default: false
    }
  },
  setup(__props) {
    const props = __props;
    const wrapperClasses = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (!props.responsive) {
        return false;
      }
      return props.responsive !== true ? `table-responsive-${props.responsive}` : "table-responsive";
    });
    const borderClass = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (!props.border) {
        return "";
      }
      return props.border !== true ? `table-bordered border-${props.border}` : "table-bordered";
    });
    const tableClasses = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "table",
        props.dark && "table-dark",
        props.light && "table-light",
        props.variant && `table-${props.variant}`,
        props.striped && "table-striped",
        borderClass.value,
        props.borderless && "table-borderless",
        props.hover && "table-hover",
        props.sm && "table-sm",
        props.align && props.align === "top" ? "align-top" : props.align === "bottom" ? "align-bottom" : props.align === "middle" ? "align-middle" : "",
        props.captionTop && "caption-top",
        props.tableStyle
      ];
    });
    return (_ctx, _cache) => {
      return __props.responsive ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
        key: 0,
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(wrapperClasses))
      }, [
        ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(tableClasses),
          style: __props.tableStyle
        }, _ctx.$attrs), {
          default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, ["class", "style"]))
      ], 2)) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
        key: 1,
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(tableClasses),
        style: __props.tableStyle
      }, _ctx.$attrs), {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16, ["class", "style"]));
    };
  }
});
const _hoisted_1$6 = ["id", "value"];
const _hoisted_2$6 = ["for"];
const _hoisted_3$4 = {
  key: 2,
  class: "form-helper"
};
const _hoisted_4$3 = {
  key: 3,
  class: "form-helper"
};
const _hoisted_5$1 = { class: "form-counter" };
const _hoisted_6$1 = {
  key: 7,
  class: "form-notch"
};
const _hoisted_7$1 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", { class: "form-notch-trailing" }, null, -1);
const _hoisted_8$1 = ["id", "value"];
const _hoisted_9$1 = ["for"];
const _hoisted_10$1 = {
  key: 1,
  class: "form-helper"
};
const _hoisted_11$1 = {
  key: 2,
  class: "form-helper"
};
const _hoisted_12$1 = { class: "form-counter" };
const _hoisted_13$1 = {
  key: 5,
  class: "form-notch"
};
const _hoisted_14 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", { class: "form-notch-trailing" }, null, -1);
const _hoisted_15 = {
  key: 9,
  class: "form-text"
};
const __default__$5 = {
  inheritAttrs: false
};
const _sfc_main$6 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  ...__default__$5,
  __name: "MDBInput",
  props: {
    id: String,
    label: String,
    labelClass: String,
    modelValue: [String, Number, Date],
    size: String,
    formOutline: {
      type: Boolean,
      default: true
    },
    wrapperClass: String,
    inputGroup: {
      type: [Boolean, String],
      default: false
    },
    wrap: {
      type: Boolean,
      default: true
    },
    formText: String,
    white: Boolean,
    validationEvent: String,
    isValidated: Boolean,
    isValid: Boolean,
    validFeedback: String,
    invalidFeedback: String,
    tooltipFeedback: {
      type: Boolean,
      default: false
    },
    tag: {
      type: String,
      default: "div"
    },
    helper: String,
    counter: Boolean,
    maxlength: {
      type: Number,
      default: 0
    }
  },
  emits: ["update:modelValue", "click-outside", "on-validate"],
  setup(__props, { expose, emit }) {
    const props = __props;
    const attrs = (0,vue__WEBPACK_IMPORTED_MODULE_0__.useAttrs)();
    const inputRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const inputValue = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.modelValue);
    const labelRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const showPlaceholder = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
    const notchLeadingWidth = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(9);
    const notchMiddleWidth = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0);
    const uid = props.id || getUID("MDBInput-");
    const wrapperClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        props.formOutline && "form-outline",
        inputGroupClassName.value,
        props.white && "form-white",
        props.wrapperClass
      ];
    });
    const inputClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "form-control",
        props.size && `form-control-${props.size}`,
        inputValue.value && "active",
        showPlaceholder.value && "placeholder-active",
        isInputValidated.value && isInputValid.value && "is-valid",
        isInputValidated.value && !isInputValid.value && "is-invalid"
      ];
    });
    const labelClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["form-label", props.labelClass];
    });
    const inputGroupClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (!props.inputGroup) {
        return;
      }
      return props.inputGroup !== true ? `input-group input-group-${props.inputGroup}` : "input-group";
    });
    const validationStyle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.inputGroup && isInputValidated.value ? { marginBottom: "1rem" } : "";
    });
    const validFeedbackClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.tooltipFeedback ? "valid-tooltip" : "valid-feedback";
    });
    const invalidFeedbackClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.tooltipFeedback ? "invalid-tooltip" : "invalid-feedback";
    });
    const isInputValidated = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.isValidated);
    const isInputValid = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.isValid);
    const defaultValidatorInvalidFeedback = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)("");
    const customInvalidFeedback = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (isInputValidated.value && !isInputValid.value && props.validationEvent) {
        return defaultValidatorInvalidFeedback.value;
      }
      return props.invalidFeedback;
    });
    const handleValidation = (e) => {
      const target = e.target;
      isInputValid.value = target.checkValidity();
      if (!isInputValid.value) {
        defaultValidatorInvalidFeedback.value = target.validationMessage;
      }
      isInputValidated.value = true;
      emit("on-validate", isInputValid.value);
    };
    const bindValidationEvents = () => {
      if (props.validationEvent === "submit")
        return;
      typeof inputRef.value !== "string" && on(inputRef.value, props.validationEvent, handleValidation);
    };
    function calcNotch() {
      if (labelRef.value) {
        notchMiddleWidth.value = labelRef.value.clientWidth * 0.8 + 8;
      }
    }
    function setPlaceholder() {
      if (attrs.placeholder && !labelRef.value) {
        showPlaceholder.value = true;
      } else {
        showPlaceholder.value = false;
      }
    }
    const currentLength = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    currentLength.value = typeof inputValue.value === "string" && inputValue.value ? inputValue.value.length : 0;
    function handleInput(e) {
      const target = e.target;
      if (props.counter) {
        if (target.value.length > props.maxlength) {
          if (typeof inputValue.value === "string") {
            target.value = inputValue.value;
          }
          return;
        }
        currentLength.value = target.value.length;
      }
      inputValue.value = target.value;
      emit("update:modelValue", inputValue.value);
    }
    function clickOutside() {
      emit("click-outside");
    }
    const isTypeDate = attrs.type && attrs.type === "date";
    const checkDateType = (isFocused = false) => {
      if (!isTypeDate) {
        return;
      }
      if (typeof inputRef.value !== "string") {
        inputRef.value.type = isFocused ? "date" : "text";
      }
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {
      calcNotch();
      setPlaceholder();
      checkDateType();
      if (props.validationEvent) {
        bindValidationEvents();
      }
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onUpdated)(() => {
      calcNotch();
      setPlaceholder();
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onUnmounted)(() => {
      typeof inputRef.value !== "string" && off(inputRef.value, props.validationEvent, handleValidation);
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect)(() => {
      var _a, _b;
      if (props.counter) {
        if (typeof props.modelValue === "string") {
          if (((_a = props.modelValue) == null ? void 0 : _a.length) > props.maxlength) {
            inputValue.value = props.modelValue.slice(0, props.maxlength);
            currentLength.value = props.maxlength;
            return;
          }
          currentLength.value = ((_b = props.modelValue) == null ? void 0 : _b.length) || 0;
        }
      }
      inputValue.value = props.modelValue;
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => props.isValidated,
      (value) => isInputValidated.value = value
    );
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => props.isValid,
      (value) => isInputValid.value = value
    );
    expose({
      inputRef
    });
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, [
        !__props.wrap ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)(((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("input", (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
          key: 0,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(inputClassName),
          id: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid),
          value: inputValue.value
        }, _ctx.$attrs, {
          onInput: handleInput,
          ref_key: "inputRef",
          ref: inputRef,
          onFocus: _cache[0] || (_cache[0] = ($event) => checkDateType(true)),
          onBlur: _cache[1] || (_cache[1] = ($event) => checkDateType())
        }), null, 16, _hoisted_1$6)), [
          [(0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(vMdbClickOutside), clickOutside]
        ]) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        __props.label && !__props.wrap ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("label", {
          key: 1,
          ref_key: "labelRef",
          ref: labelRef,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(labelClassName)),
          for: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid)
        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.label), 11, _hoisted_2$6)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap && __props.helper ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_3$4, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.helper), 1)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap && __props.counter ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_4$3, [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_5$1, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(currentLength.value) + " / " + (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.maxlength), 1)
        ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default", { key: 4 }) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap && __props.validFeedback ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
          key: 5,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(validFeedbackClassName))
        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.validFeedback), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap && (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(customInvalidFeedback) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
          key: 6,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(invalidFeedbackClassName))
        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(customInvalidFeedback)), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap && __props.formOutline ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_6$1, [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", {
            class: "form-notch-leading",
            style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)({ width: `${notchLeadingWidth.value}px` })
          }, null, 4),
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", {
            class: "form-notch-middle",
            style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)({ width: `${notchMiddleWidth.value}px` })
          }, null, 4),
          _hoisted_7$1
        ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        __props.wrap ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)(((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
          key: 8,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(wrapperClassName)),
          style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(validationStyle))
        }, {
          default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "prepend"),
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("input", (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({ class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(inputClassName) }, _ctx.$attrs, {
              id: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid),
              value: inputValue.value,
              onInput: handleInput,
              ref_key: "inputRef",
              ref: inputRef,
              onFocus: _cache[2] || (_cache[2] = ($event) => checkDateType(true)),
              onBlur: _cache[3] || (_cache[3] = ($event) => checkDateType())
            }), null, 16, _hoisted_8$1),
            __props.label ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("label", {
              key: 0,
              ref_key: "labelRef",
              ref: labelRef,
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(labelClassName)),
              for: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid)
            }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.label), 11, _hoisted_9$1)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
            __props.helper ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_10$1, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.helper), 1)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
            __props.counter ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_11$1, [
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_12$1, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(currentLength.value) + " / " + (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.maxlength), 1)
            ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default"),
            __props.validFeedback ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
              key: 3,
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(validFeedbackClassName))
            }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.validFeedback), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(customInvalidFeedback) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
              key: 4,
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(invalidFeedbackClassName))
            }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(customInvalidFeedback)), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
            __props.formOutline ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_13$1, [
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", {
                class: "form-notch-leading",
                style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)({ width: `${notchLeadingWidth.value}px` })
              }, null, 4),
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", {
                class: "form-notch-middle",
                style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)({ width: `${notchMiddleWidth.value}px` })
              }, null, 4),
              _hoisted_14
            ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
          ]),
          _: 3
        }, 8, ["class", "style"])), [
          [(0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(vMdbClickOutside), clickOutside]
        ]) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        __props.formText ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_15, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.formText), 1)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
      ], 64);
    };
  }
});
const _hoisted_1$5 = ["id", "value", "rows"];
const _hoisted_2$5 = ["for"];
const _hoisted_3$3 = {
  key: 2,
  class: "form-helper"
};
const _hoisted_4$2 = {
  key: 3,
  class: "form-helper"
};
const _hoisted_5 = { class: "form-counter" };
const _hoisted_6 = ["id", "value", "rows"];
const _hoisted_7 = ["for"];
const _hoisted_8 = {
  key: 1,
  class: "form-helper"
};
const _hoisted_9 = {
  key: 2,
  class: "form-helper"
};
const _hoisted_10 = { class: "form-counter" };
const _hoisted_11 = {
  key: 5,
  class: "form-notch"
};
const _hoisted_12 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", { class: "form-notch-trailing" }, null, -1);
const _hoisted_13 = {
  key: 8,
  class: "form-text"
};
const __default__$4 = {
  inheritAttrs: false
};
const _sfc_main$5 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  ...__default__$4,
  __name: "MDBTextarea",
  props: {
    id: String,
    rows: {
      type: [String, Number],
      default: 4
    },
    label: String,
    modelValue: [String, Number],
    size: String,
    formOutline: {
      type: Boolean,
      default: true
    },
    wrapperClass: String,
    inputGroup: {
      type: [Boolean, String],
      default: false
    },
    wrap: {
      type: Boolean,
      default: true
    },
    formText: String,
    white: Boolean,
    validationEvent: String,
    isValidated: Boolean,
    isValid: Boolean,
    validFeedback: String,
    invalidFeedback: String,
    tooltipFeedback: {
      type: Boolean,
      default: false
    },
    tag: {
      type: String,
      default: "div"
    },
    helper: String,
    counter: Boolean,
    maxLength: {
      type: Number,
      default: 0
    }
  },
  emits: ["update:modelValue", "on-validate"],
  setup(__props, { emit }) {
    const props = __props;
    const attrs = (0,vue__WEBPACK_IMPORTED_MODULE_0__.useAttrs)();
    const textareaRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)("textareaRef");
    const textareaValue = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.modelValue);
    const labelRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    const showPlaceholder = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
    const notchLeadingWidth = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(9);
    const notchMiddleWidth = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0);
    const uid = props.id || getUID("MDBTextarea-");
    const wrapperClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        props.formOutline && "form-outline",
        inputGroupClassName.value,
        props.white && "form-white",
        props.wrapperClass
      ];
    });
    const textareaClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "form-control",
        props.size && `form-control-${props.size}`,
        textareaValue.value && "active",
        showPlaceholder.value && "placeholder-active",
        isInputValidated.value && isInputValid.value && "is-valid",
        isInputValidated.value && !isInputValid.value && "is-invalid"
      ];
    });
    const inputGroupClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (!props.inputGroup) {
        return;
      }
      return props.inputGroup !== true ? `input-group input-group-${props.inputGroup}` : "input-group";
    });
    const validationStyle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.inputGroup && isInputValidated.value ? { marginBottom: "1rem" } : "";
    });
    const validFeedbackClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.tooltipFeedback ? "valid-tooltip" : "valid-feedback";
    });
    const invalidFeedbackClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.tooltipFeedback ? "invalid-tooltip" : "invalid-feedback";
    });
    const isInputValidated = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.isValidated);
    const isInputValid = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.isValid);
    const defaultValidatorInvalidFeedback = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)("");
    const customInvalidFeedback = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      if (isInputValidated.value && !isInputValid.value && props.validationEvent) {
        return defaultValidatorInvalidFeedback.value;
      }
      return props.invalidFeedback;
    });
    const handleValidation = (e) => {
      const target = e.target;
      isInputValid.value = target.checkValidity();
      if (!isInputValid.value) {
        defaultValidatorInvalidFeedback.value = target.validationMessage;
      }
      isInputValidated.value = true;
      emit("on-validate", isInputValid.value);
    };
    const bindValidationEvents = () => {
      if (props.validationEvent === "submit")
        return;
      on(
        textareaRef.value,
        props.validationEvent,
        handleValidation
      );
    };
    function calcNotch() {
      if (labelRef.value) {
        notchMiddleWidth.value = labelRef.value.clientWidth * 0.8 + 8;
      }
    }
    function setPlaceholder() {
      if (attrs.placeholder && !labelRef.value) {
        showPlaceholder.value = true;
      } else {
        showPlaceholder.value = false;
      }
    }
    const currentLength = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);
    currentLength.value = typeof textareaValue.value === "string" && textareaValue.value ? textareaValue.value.length : 0;
    function handleInput(e) {
      const target = e.target;
      if (props.counter) {
        if (target.value.length > props.maxLength) {
          if (typeof textareaValue.value === "string") {
            target.value = textareaValue.value;
          }
          return;
        }
        currentLength.value = target.value.length;
      }
      textareaValue.value = target.value;
      emit("update:modelValue", textareaValue.value);
    }
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {
      calcNotch();
      setPlaceholder();
      if (props.validationEvent) {
        bindValidationEvents();
      }
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onUpdated)(() => {
      calcNotch();
      setPlaceholder();
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onUnmounted)(() => {
      off(
        textareaRef.value,
        props.validationEvent,
        handleValidation
      );
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect)(() => {
      var _a;
      if (props.counter) {
        if (typeof props.modelValue === "string" && ((_a = props.modelValue) == null ? void 0 : _a.length) > props.maxLength) {
          textareaValue.value = props.modelValue.slice(0, props.maxLength);
          currentLength.value = props.maxLength;
          return;
        }
        currentLength.value = typeof props.modelValue === "string" && props.modelValue ? props.modelValue.length : 0;
      }
      textareaValue.value = props.modelValue;
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => props.isValidated,
      (value) => isInputValidated.value = value
    );
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => props.isValid,
      (value) => isInputValid.value = value
    );
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, [
        !__props.wrap ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("textarea", (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
          key: 0,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(textareaClassName)
        }, _ctx.$attrs, {
          id: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid),
          value: textareaValue.value,
          onInput: handleInput,
          rows: __props.rows,
          ref_key: "textareaRef",
          ref: textareaRef
        }), null, 16, _hoisted_1$5)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        __props.label && !__props.wrap ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("label", {
          key: 1,
          ref_key: "labelRef",
          ref: labelRef,
          class: "form-label",
          for: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid)
        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.label), 9, _hoisted_2$5)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap && __props.helper ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_3$3, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.helper), 1)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap && __props.counter ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_4$2, [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_5, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(currentLength.value) + " / " + (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.maxLength), 1)
        ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default", { key: 4 }) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap && __props.validFeedback ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
          key: 5,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(validFeedbackClassName))
        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.validFeedback), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap && (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(customInvalidFeedback) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
          key: 6,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(invalidFeedbackClassName))
        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(customInvalidFeedback)), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        __props.wrap ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
          key: 7,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(wrapperClassName)),
          style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(validationStyle))
        }, {
          default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "prepend"),
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("textarea", (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({ class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(textareaClassName) }, _ctx.$attrs, {
              id: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid),
              value: textareaValue.value,
              onInput: handleInput,
              rows: __props.rows,
              ref_key: "textareaRef",
              ref: textareaRef
            }), null, 16, _hoisted_6),
            __props.label ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("label", {
              key: 0,
              ref_key: "labelRef",
              ref: labelRef,
              class: "form-label",
              for: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid)
            }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.label), 9, _hoisted_7)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
            __props.helper ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_8, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.helper), 1)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
            __props.counter ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_9, [
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_10, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(currentLength.value) + " / " + (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.maxLength), 1)
            ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
            __props.validFeedback ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
              key: 3,
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(validFeedbackClassName))
            }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.validFeedback), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(customInvalidFeedback) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
              key: 4,
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(invalidFeedbackClassName))
            }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(customInvalidFeedback)), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
            __props.formOutline ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_11, [
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", {
                class: "form-notch-leading",
                style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)({ width: `${notchLeadingWidth.value}px` })
              }, null, 4),
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", {
                class: "form-notch-middle",
                style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)({ width: `${notchMiddleWidth.value}px` })
              }, null, 4),
              _hoisted_12
            ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
          ]),
          _: 3
        }, 8, ["class", "style"])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        __props.formText ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_13, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.formText), 1)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
      ], 64);
    };
  }
});
const _hoisted_1$4 = ["id", "checked", "required", "aria-required"];
const _hoisted_2$4 = ["for", "innerHTML"];
const _hoisted_3$2 = ["id", "checked", "required", "aria-required"];
const _hoisted_4$1 = ["for", "innerHTML"];
const __default__$3 = {
  inheritAttrs: false
};
const _sfc_main$4 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  ...__default__$3,
  __name: "MDBCheckbox",
  props: {
    id: String,
    label: String,
    modelValue: Boolean,
    inline: Boolean,
    wrapperClass: String,
    labelClass: String,
    inputClass: String,
    btnCheck: Boolean,
    required: Boolean,
    validateOnChange: Boolean,
    isValidated: Boolean,
    isValid: Boolean,
    validFeedback: String,
    invalidFeedback: String,
    tooltipFeedback: {
      type: Boolean,
      default: false
    },
    wrap: {
      type: Boolean,
      default: true
    },
    formCheck: {
      type: Boolean,
      default: true
    },
    tag: {
      type: String,
      default: "div"
    }
  },
  emits: ["update:modelValue", "on-validate"],
  setup(__props, { emit }) {
    const props = __props;
    const inputRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)("inputRef");
    const inputValue = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.modelValue);
    const uid = props.id || getUID("MDBCheckbox-");
    const wrapperClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        props.formCheck && !props.btnCheck ? "form-check" : "",
        props.inline && "form-check-inline",
        props.wrapperClass
      ];
    });
    const inputClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        props.btnCheck ? "btn-check" : "form-check-input",
        props.inputClass && props.inputClass,
        isInputValidated.value && isInputValid.value && "is-valid",
        isInputValidated.value && !isInputValid.value && "is-invalid"
      ];
    });
    const labelClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [props.labelClass || "form-check-label"];
    });
    const validFeedbackClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.tooltipFeedback ? "valid-tooltip" : "valid-feedback";
    });
    const invalidFeedbackClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.tooltipFeedback ? "invalid-tooltip" : "invalid-feedback";
    });
    const isInputValidated = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.isValidated);
    const isInputValid = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.isValid);
    const handleValidation = (e) => {
      const target = e.target;
      isInputValid.value = target.checkValidity();
      isInputValidated.value = true;
      emit("on-validate", isInputValid.value);
    };
    const bindValidationEvent = () => {
      on(inputRef.value, "change", handleValidation);
    };
    function handleChange() {
      inputValue.value = !inputValue.value;
      emit("update:modelValue", inputValue.value);
    }
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {
      if (props.validateOnChange) {
        bindValidationEvent();
      }
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onUnmounted)(() => {
      off(inputRef.value, "change", handleValidation);
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect)(() => inputValue.value = props.modelValue);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => props.isValidated,
      (value) => isInputValidated.value = value
    );
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => props.isValid,
      (value) => isInputValid.value = value
    );
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, [
        __props.wrap ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
          key: 0,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(wrapperClassName))
        }, {
          default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("input", (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(inputClassName),
              type: "checkbox"
            }, _ctx.$attrs, {
              id: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid),
              checked: inputValue.value,
              onChange: handleChange,
              required: __props.required ? true : void 0,
              "aria-required": __props.required,
              ref_key: "inputRef",
              ref: inputRef
            }), null, 16, _hoisted_1$4),
            __props.label ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("label", {
              key: 0,
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(labelClassName)),
              for: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid),
              innerHTML: __props.label
            }, null, 10, _hoisted_2$4)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
            __props.validFeedback ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
              key: 1,
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(validFeedbackClassName))
            }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.validFeedback), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
            __props.invalidFeedback ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
              key: 2,
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(invalidFeedbackClassName))
            }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.invalidFeedback), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
          ]),
          _: 1
        }, 8, ["class"])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("input", (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
          key: 1,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(inputClassName),
          type: "checkbox"
        }, _ctx.$attrs, {
          id: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid),
          checked: inputValue.value,
          onChange: handleChange,
          required: __props.required ? true : void 0,
          "aria-required": __props.required,
          ref_key: "inputRef",
          ref: inputRef
        }), null, 16, _hoisted_3$2)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap && __props.label ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("label", {
          key: 2,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(labelClassName)),
          for: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid),
          innerHTML: __props.label
        }, null, 10, _hoisted_4$1)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap && __props.validFeedback ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
          key: 3,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(validFeedbackClassName))
        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.validFeedback), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap && __props.invalidFeedback ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
          key: 4,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(invalidFeedbackClassName))
        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.invalidFeedback), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
      ], 64);
    };
  }
});
const _hoisted_1$3 = ["id", "required", "aria-required"];
const _hoisted_2$3 = ["for"];
const _hoisted_3$1 = ["id", "required", "aria-required"];
const _hoisted_4 = ["for"];
const __default__$2 = {
  inheritAttrs: false
};
const _sfc_main$3 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  ...__default__$2,
  __name: "MDBRadio",
  props: {
    id: String,
    label: String,
    inline: Boolean,
    modelValue: String,
    wrapperClass: String,
    labelClass: String,
    btnCheck: Boolean,
    required: Boolean,
    validateOnChange: Boolean,
    isValidated: Boolean,
    isValid: Boolean,
    validFeedback: String,
    invalidFeedback: String,
    tooltipFeedback: {
      type: Boolean,
      default: false
    },
    wrap: {
      type: Boolean,
      default: true
    },
    formCheck: {
      type: Boolean,
      default: true
    },
    tag: {
      type: String,
      default: "div"
    }
  },
  emits: ["update:modelValue", "on-validate"],
  setup(__props, { emit }) {
    const props = __props;
    const inputRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)("inputRef");
    const inputValue = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.modelValue || false);
    const uid = props.id || getUID("MDBRadio-");
    const wrapperClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        props.formCheck && !props.btnCheck ? "form-check" : "",
        props.inline && "form-check-inline",
        props.wrapperClass
      ];
    });
    const inputClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        props.btnCheck ? "btn-check" : "form-check-input",
        isInputValidated.value && isInputValid.value && "is-valid",
        isInputValidated.value && !isInputValid.value && "is-invalid"
      ];
    });
    const labelClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [props.labelClass || "form-check-label"];
    });
    const validFeedbackClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.tooltipFeedback ? "valid-tooltip" : "valid-feedback";
    });
    const invalidFeedbackClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.tooltipFeedback ? "invalid-tooltip" : "invalid-feedback";
    });
    const isInputValidated = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.isValidated);
    const isInputValid = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.isValid);
    const handleValidation = (e) => {
      const target = e.target;
      isInputValid.value = target.checkValidity();
      isInputValidated.value = true;
      emit("on-validate", isInputValid.value);
    };
    const bindValidationEvent = () => {
      on(inputRef.value, "change", handleValidation);
    };
    function handleChange(e) {
      const target = e.target;
      emit("update:modelValue", target.value);
    }
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {
      if (props.validateOnChange) {
        bindValidationEvent();
      }
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onUnmounted)(() => {
      off(inputRef.value, "change", handleValidation);
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect)(() => inputValue.value = props.modelValue);
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => props.isValidated,
      (value) => isInputValidated.value = value
    );
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => props.isValid,
      (value) => isInputValid.value = value
    );
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, [
        __props.wrap ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
          key: 0,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(wrapperClassName))
        }, {
          default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("input", (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(inputClassName),
              type: "radio"
            }, _ctx.$attrs, {
              id: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid),
              onChange: handleChange,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => inputValue.value = $event),
              required: __props.required ? true : void 0,
              "aria-required": __props.required,
              ref_key: "inputRef",
              ref: inputRef
            }), null, 16, _hoisted_1$3), [
              [vue__WEBPACK_IMPORTED_MODULE_0__.vModelRadio, inputValue.value]
            ]),
            __props.label ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("label", {
              key: 0,
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(labelClassName)),
              for: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid)
            }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.label), 11, _hoisted_2$3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
            __props.validFeedback ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
              key: 1,
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(validFeedbackClassName))
            }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.validFeedback), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
            __props.invalidFeedback ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
              key: 2,
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(invalidFeedbackClassName))
            }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.invalidFeedback), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
          ]),
          _: 1
        }, 8, ["class"])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)(((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("input", (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
          key: 1,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(inputClassName),
          type: "radio"
        }, _ctx.$attrs, {
          id: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid),
          onChange: handleChange,
          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => inputValue.value = $event),
          required: __props.required ? true : void 0,
          "aria-required": __props.required,
          ref_key: "inputRef",
          ref: inputRef
        }), null, 16, _hoisted_3$1)), [
          [vue__WEBPACK_IMPORTED_MODULE_0__.vModelRadio, inputValue.value]
        ]) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap && __props.label ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("label", {
          key: 2,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(labelClassName)),
          for: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid)
        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.label), 11, _hoisted_4)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap && __props.validFeedback ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
          key: 3,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(validFeedbackClassName))
        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.validFeedback), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        !__props.wrap && __props.invalidFeedback ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
          key: 4,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(invalidFeedbackClassName))
        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.invalidFeedback), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
      ], 64);
    };
  }
});
const _hoisted_1$2 = ["for"];
const _hoisted_2$2 = ["id"];
const _sfc_main$2 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  __name: "MDBFile",
  props: {
    id: String,
    inputClass: String,
    invalidFeedback: String,
    isInvalid: Boolean,
    isValid: Boolean,
    isValidated: Boolean,
    label: String,
    labelClass: String,
    modelValue: {
      type: [FileList, Array],
      default: () => []
    },
    size: String,
    tooltipFeedback: Boolean,
    validFeedback: String,
    validateOnChange: Boolean
  },
  emits: ["update:modelValue", "on-validate"],
  setup(__props, { emit }) {
    const props = __props;
    const uid = props.id || getUID("MDBFile-");
    const inputValue = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.modelValue);
    const inputClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return [
        "form-control",
        props.size && `form-control-${props.size}`,
        isInputValidated.value && isInputValid.value && "is-valid",
        isInputValidated.value && !isInputValid.value && "is-invalid",
        props.inputClass
      ];
    });
    const labelClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["form-label", props.labelClass];
    });
    const validFeedbackClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.tooltipFeedback ? "valid-tooltip" : "valid-feedback";
    });
    const invalidFeedbackClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return props.tooltipFeedback ? "invalid-tooltip" : "invalid-feedback";
    });
    const isInputValidated = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.isValidated);
    const isInputValid = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.isValid);
    const handleValidation = (event) => {
      const target = event.target;
      if (target.files) {
        isInputValid.value = target.files.length > 0;
        isInputValidated.value = true;
        emit("on-validate", isInputValid.value);
      }
    };
    const handleChange = (event) => {
      const target = event.target;
      if (target.files) {
        inputValue.value = target.files;
        emit("update:modelValue", inputValue.value);
        if (props.validateOnChange) {
          handleValidation(event);
        }
      }
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => props.modelValue,
      (value) => inputValue.value = value
    );
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => props.isValidated,
      (value) => isInputValidated.value = value
    );
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => props.isValid,
      (value) => {
        isInputValid.value = value;
      }
    );
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, [
        __props.label ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("label", {
          key: 0,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(labelClassName)),
          for: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid)
        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.label), 11, _hoisted_1$2)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("input", (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
          type: "file",
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(inputClassName)
        }, _ctx.$attrs, {
          id: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid),
          onChange: handleChange
        }), null, 16, _hoisted_2$2),
        __props.validFeedback ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
          key: 1,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(validFeedbackClassName))
        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.validFeedback), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        __props.invalidFeedback ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
          key: 2,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(invalidFeedbackClassName))
        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.invalidFeedback), 3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
      ], 64);
    };
  }
});
const _hoisted_1$1 = ["for"];
const _hoisted_2$1 = ["id", "value", "min", "max"];
const _hoisted_3 = { class: "thumb-value" };
const __default__$1 = {
  inheritAttrs: false
};
const _sfc_main$1 = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  ...__default__$1,
  __name: "MDBRange",
  props: {
    id: String,
    inputClass: String,
    label: String,
    labelClass: String,
    max: {
      type: Number,
      default: 100
    },
    min: {
      type: Number,
      default: 0
    },
    modelValue: {
      type: Number,
      default: 50
    },
    tag: {
      type: String,
      default: "div"
    },
    thumb: {
      type: Boolean,
      default: true
    },
    thumbClass: String,
    wrapperClass: String
  },
  emits: ["update:modelValue"],
  setup(__props, { emit }) {
    const props = __props;
    const inputValue = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.modelValue);
    const minValue = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.min);
    const maxValue = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.max);
    const uid = props.id || getUID("MDBRange-");
    const isThumbActive = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
    const wrapperClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["range", props.wrapperClass];
    });
    const inputClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["form-range", props.inputClass];
    });
    const labelClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["form-label", props.labelClass];
    });
    const thumbClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["thumb", isThumbActive.value && "thumb-active", props.thumbClass];
    });
    const thumbLeftPosition = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0);
    const handleInput = (e) => {
      const target = e.target;
      inputValue.value = parseFloat(target.value);
      emit("update:modelValue", inputValue.value);
      setThumbPosition();
    };
    const toggleThumb = (isActive) => {
      isThumbActive.value = isActive;
    };
    const setThumbPosition = () => {
      const inputVal = typeof inputValue.value === "string" ? parseFloat(inputValue.value) : inputValue.value;
      const left2 = (inputVal - minValue.value) * 100 / (maxValue.value - minValue.value);
      thumbLeftPosition.value = `calc(${left2}% + (${8 - left2 * 0.15}px))`;
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.nextTick)(() => {
      setThumbPosition();
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => props.modelValue,
      (value) => {
        inputValue.value = value;
        setThumbPosition();
      }
    );
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, [
        __props.label ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("label", {
          key: 0,
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(labelClassName)),
          for: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid)
        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.label), 11, _hoisted_1$1)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true),
        ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(wrapperClassName))
        }, {
          default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
            (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("input", (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
              type: "range",
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(inputClassName),
              id: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid),
              value: inputValue.value,
              min: minValue.value,
              max: maxValue.value
            }, _ctx.$attrs, {
              onInput: handleInput,
              onMousedown: _cache[0] || (_cache[0] = ($event) => toggleThumb(true)),
              onTouchstart: _cache[1] || (_cache[1] = ($event) => toggleThumb(true)),
              onMouseup: _cache[2] || (_cache[2] = ($event) => toggleThumb(false)),
              onTouchend: _cache[3] || (_cache[3] = ($event) => toggleThumb(false))
            }), null, 16, _hoisted_2$1),
            __props.thumb ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("span", {
              key: 0,
              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(thumbClassName)),
              style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)({ left: thumbLeftPosition.value })
            }, [
              (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("span", _hoisted_3, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(inputValue.value), 1)
            ], 6)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("", true)
          ]),
          _: 1
        }, 8, ["class"]))
      ], 64);
    };
  }
});
const _hoisted_1 = ["id", "checked"];
const _hoisted_2 = ["for"];
const __default__ = {
  inheritAttrs: false
};
const _sfc_main = /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({
  ...__default__,
  __name: "MDBSwitch",
  props: {
    id: String,
    inputClass: String,
    label: String,
    labelClass: String,
    modelValue: {
      type: Boolean,
      default: false
    },
    tag: {
      type: String,
      default: "div"
    },
    wrapperClass: String
  },
  emits: ["update:modelValue"],
  setup(__props, { emit }) {
    const props = __props;
    const inputValue = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.modelValue);
    const uid = props.id || getUID("MDBSwitch-");
    const wrapperClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["form-check form-switch", props.wrapperClass];
    });
    const inputClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["form-check-input", props.inputClass];
    });
    const labelClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      return ["form-check-label", props.labelClass];
    });
    function handleChange() {
      inputValue.value = !inputValue.value;
      emit("update:modelValue", inputValue.value);
    }
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(
      () => props.modelValue,
      (value) => inputValue.value = value
    );
    return (_ctx, _cache) => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)((0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent)(__props.tag), {
        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(wrapperClassName))
      }, {
        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("input", (0,vue__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({
            type: "checkbox",
            class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(inputClassName),
            id: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid)
          }, _ctx.$attrs, {
            checked: inputValue.value,
            onChange: handleChange
          }), null, 16, _hoisted_1),
          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("label", {
            class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)((0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(labelClassName)),
            for: (0,vue__WEBPACK_IMPORTED_MODULE_0__.unref)(uid)
          }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(__props.label), 11, _hoisted_2)
        ]),
        _: 1
      }, 8, ["class"]);
    };
  }
});
const ScrollSpyDirective = {
  mounted(el, binding) {
    el.scrollspy = {
      links: [],
      container: window,
      scrollPosition: null,
      async: false,
      offset: 0
    };
    if (binding.value) {
      el.scrollspy.container = document.getElementById(binding.value.container) || window;
      el.scrollspy.async = binding.value.async || false;
      el.scrollspy.offset = binding.value.offset || 0;
    }
    el.scrollspy.scrollPosition = getScrollPostion(el.scrollspy.container);
    el.scrollspy.findHrefs = (node) => {
      var _a;
      if (node.attributes && node instanceof HTMLAnchorElement && node.href) {
        el.scrollspy.links.push(node);
        if (node.classList.contains("collapsible-scrollspy")) {
          const list = (_a = node.parentNode) == null ? void 0 : _a.querySelector("ul");
          list.dataset.mdbCollapsibleScrollspyHeight = list.clientHeight.toString();
          list.style.overflow = "hidden";
          list.style.height = "0";
        }
      } else if (node.childNodes) {
        node.childNodes.forEach(
          (child) => {
            var _a2, _b;
            return (_b = (_a2 = el.scrollspy).findHrefs) == null ? void 0 : _b.call(_a2, child);
          }
        );
      }
    };
    el.scrollspy.setActive = (index) => {
      if (binding.value && binding.value.callback) {
        binding.instance[binding.value.callback](index);
        return;
      }
      el.scrollspy.links.forEach((link, i) => {
        if (index === i) {
          link.classList.add("active");
        } else {
          link.classList.remove("active");
        }
      });
      setNestedActive(el.scrollspy.links, index, el.scrollspy.container);
      setCollapsibleActive(el.scrollspy.links);
    };
    el.scrollspy.spy = () => {
      var _a, _b, _c, _d;
      if (el.disableScroll)
        return;
      const container = el.scrollspy.container;
      el.scrollspy.scrollPosition = getScrollPostion(container);
      el.scrollspy.links.forEach((link) => {
        const element = document.querySelector(link.hash);
        if (!element) {
          return;
        }
        const rect = element.getBoundingClientRect();
        let condition;
        if (container === window) {
          condition = window.innerHeight > rect.top && rect.top + rect.height >= 0;
        } else {
          if (!(container instanceof Window)) {
            const containerRect = container.getBoundingClientRect();
            condition = rect.top <= containerRect.top + containerRect.height && rect.top + rect.height >= containerRect.top;
          }
        }
        link.isLinkActive = condition;
      });
      const activeLinks = el.scrollspy.links.filter(
        (link) => link.isLinkActive
      );
      if (activeLinks.length > 0) {
        const activeElement = activeLinks[0];
        const activeLink = activeElement.scrollspyIndex;
        (_b = (_a = el.scrollspy).setActive) == null ? void 0 : _b.call(_a, activeLink);
      } else {
        (_d = (_c = el.scrollspy).setActive) == null ? void 0 : _d.call(_c, -1);
      }
    };
    el.scrollspy.clickHandler = (e, link) => {
      var _a, _b;
      const container = el.scrollspy.container;
      window.clearTimeout(el.disableScrollTimeout);
      el.disableScroll = true;
      e.preventDefault();
      const element = document.querySelector(link.hash);
      if (!element) {
        return;
      }
      const rect = element.getBoundingClientRect();
      if (container === window) {
        window.scrollTo({
          top: window.scrollY + rect.y - el.scrollspy.offset
        });
      } else {
        if (!(container instanceof Window)) {
          const containerRect = container.getBoundingClientRect();
          container.style.scrollBehavior = "smooth";
          container.scrollTop = container.scrollTop + rect.y - containerRect.y - el.scrollspy.offset;
        }
      }
      (_b = (_a = el.scrollspy).setActive) == null ? void 0 : _b.call(_a, link.scrollspyIndex);
      link.scrollspyIndex && setParentsActive(el.scrollspy.links[link.scrollspyIndex], el);
      setCollapsibleActive(el.scrollspy.links);
      el.disableScrollTimeout = setTimeout(() => {
        el.disableScroll = false;
      }, 800);
    };
    el.scrollspy.findHrefs(el);
    el.scrollspy.links.forEach((link, i) => {
      link.scrollspyIndex = i;
      link.addEventListener(
        "click",
        (e) => {
          var _a, _b;
          return (_b = (_a = el.scrollspy).clickHandler) == null ? void 0 : _b.call(_a, e, link);
        }
      );
    });
    el.scrollspy.spy();
    el.scrollspy.container.addEventListener(
      "scroll",
      (e) => {
        var _a, _b;
        return (_b = (_a = el.scrollspy).spy) == null ? void 0 : _b.call(_a, e);
      }
    );
    window.addEventListener("resize", (e) => {
      var _a, _b;
      return (_b = (_a = el.scrollspy).spy) == null ? void 0 : _b.call(_a, e);
    });
  },
  updated(el, binding) {
    var _a, _b;
    if (((_a = binding.modifiers) == null ? void 0 : _a.async) && binding.value && !binding.value.loading && ((_b = binding.oldValue) == null ? void 0 : _b.loading)) {
      setTimeout(() => {
        var _a2, _b2, _c, _d;
        el.scrollspy.links = [];
        (_b2 = (_a2 = el.scrollspy).findHrefs) == null ? void 0 : _b2.call(_a2, el);
        el.scrollspy.links.forEach((link, i) => {
          link.scrollspyIndex = i;
          link.addEventListener(
            "click",
            (e) => {
              var _a3, _b3;
              return (_b3 = (_a3 = el.scrollspy).clickHandler) == null ? void 0 : _b3.call(_a3, e, link);
            }
          );
        });
        (_d = (_c = el.scrollspy).spy) == null ? void 0 : _d.call(_c);
      }, 0);
    }
  },
  unmounted(el) {
    window.removeEventListener("scroll", (e) => {
      var _a, _b;
      return (_b = (_a = el.scrollspy).spy) == null ? void 0 : _b.call(_a, e);
    });
    window.removeEventListener("resize", (e) => {
      var _a, _b;
      return (_b = (_a = el.scrollspy).spy) == null ? void 0 : _b.call(_a, e);
    });
  }
};
const setNestedActive = (links, index, container) => {
  const allLinks = links[index];
  if (!allLinks || !allLinks.parentNode) {
    return;
  }
  const allNestedLinks = Array.from(
    allLinks.parentNode.querySelectorAll("a")
  );
  allNestedLinks.shift();
  allNestedLinks.forEach((link) => {
    const element = document.querySelector(link.hash);
    if (!element) {
      return;
    }
    const rect = element.getBoundingClientRect();
    let condition;
    if (container === window) {
      condition = window.innerHeight > rect.top && rect.top + rect.height >= 0;
    } else {
      if (!(container instanceof Window)) {
        const containerRect = container.getBoundingClientRect();
        condition = rect.top < containerRect.top && rect.top + rect.height > containerRect.top;
      }
    }
    link.isActive = condition;
  });
  const activeLinks = allNestedLinks.filter((link) => link.isLinkActive);
  if (activeLinks.length > 0) {
    activeLinks[0].classList.add("active");
  }
};
const setParentsActive = (link, el) => {
  var _a;
  let parent = link.parentNode;
  if (!parent) {
    return;
  }
  while (parent && parent !== el) {
    if (parent.classList.contains("nav-item")) {
      (_a = parent.querySelector("a")) == null ? void 0 : _a.classList.add("active");
    }
    parent = parent.parentNode;
  }
};
const getScrollPostion = (container) => {
  return container === window ? container.scrollY : !(container instanceof Window) ? container.scrollTop : null;
};
const setCollapsibleActive = (links) => {
  links.forEach((link) => {
    var _a, _b;
    if (link.classList.contains("collapsible-scrollspy") && link.classList.contains("active")) {
      const list = (_a = link.parentNode) == null ? void 0 : _a.querySelector("ul");
      if (list) {
        list.style.overflow = "hidden";
        list.style.height = `${list.dataset.mdbCollapsibleScrollspyHeight}px`;
      }
    } else if (link.classList.contains("collapsible-scrollspy")) {
      const list = (_b = link.parentNode) == null ? void 0 : _b.querySelector("ul");
      if (list) {
        list.style.overflow = "hidden";
        list.style.height = "0";
      }
    }
  });
};



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,